    // This file is generated automatically -- do not edit
    // Generated by /home/oms/LOFAR/autoconf_share/../TIMBA/DMI/aid/build_aid_maps.pl
    #include <DMI/AtomicID.h>
    #include <DMI/TypeInfo.h>
    #include <DMI/DynamicTypeManager.h>
    #include <DMI/Packer.h>
#include "NumArray.h"
DMI::BObj * __construct_DMINumArray (int n) { return n>0 ? new DMI::NumArray [n] : new DMI::NumArray; }
#include "Vec.h"
DMI::BObj * __construct_DMIVec (int n) { return n>0 ? new DMI::Vec [n] : new DMI::Vec; }
#include "List.h"
DMI::BObj * __construct_DMIList (int n) { return n>0 ? new DMI::List [n] : new DMI::List; }
#include "Record.h"
DMI::BObj * __construct_DMIRecord (int n) { return n>0 ? new DMI::Record [n] : new DMI::Record; }
#include "HIID.h"
        void * __new_DMIHIID  (int n) 
        { return new DMI::HIID [n]; }  
        void __delete_DMIHIID (void *ptr) 
        { delete [] static_cast<DMI::HIID*>(ptr); } 
        void __copy_DMIHIID (void *to,const void *from) 
        { *static_cast<DMI::HIID*>(to) = *static_cast<const DMI::HIID*>(from); } 
        size_t __pack_DMIHIID (const void *arr,int n,void * block,size_t &nleft ) 
        { return DMI::ArrayPacker<DMI::HIID>::pack(static_cast<const DMI::HIID*>(arr),n,block,nleft); } 
        void * __unpack_DMIHIID (const void *block,size_t sz,int &n) 
        { return DMI::ArrayPacker<DMI::HIID>::allocate(block,sz,n); } 
        size_t __packsize_DMIHIID (const void *arr,int n) 
        { return DMI::ArrayPacker<DMI::HIID>::packSize(static_cast<const DMI::HIID*>(arr),n); }
#include "Timestamp.h"
        void * __new_string  (int n) 
        { return new string [n]; }  
        void __delete_string (void *ptr) 
        { delete [] static_cast<string*>(ptr); } 
        void __copy_string (void *to,const void *from) 
        { *static_cast<string*>(to) = *static_cast<const string*>(from); } 
        size_t __pack_string (const void *arr,int n,void * block,size_t &nleft ) 
        { return DMI::ArrayPacker<string>::pack(static_cast<const string*>(arr),n,block,nleft); } 
        void * __unpack_string (const void *block,size_t sz,int &n) 
        { return DMI::ArrayPacker<string>::allocate(block,sz,n); } 
        size_t __packsize_string (const void *arr,int n) 
        { return DMI::ArrayPacker<string>::packSize(static_cast<const string*>(arr),n); }
#include "TypeId.h"
    using namespace DMI;
  
    int aidRegistry_DMI ()
    {
      static int res = 

        AtomicID::registerId(-1007,"a")+
        AtomicID::registerId(-1008,"b")+
        AtomicID::registerId(-1009,"c")+
        AtomicID::registerId(-1010,"d")+
        AtomicID::registerId(-1011,"e")+
        AtomicID::registerId(-1012,"f")+
        AtomicID::registerId(-1013,"g")+
        AtomicID::registerId(-1014,"h")+
        AtomicID::registerId(-1015,"i")+
        AtomicID::registerId(-1016,"j")+
        AtomicID::registerId(-1017,"k")+
        AtomicID::registerId(-1019,"l")+
        AtomicID::registerId(-1020,"m")+
        AtomicID::registerId(-1021,"n")+
        AtomicID::registerId(-1022,"o")+
        AtomicID::registerId(-1023,"p")+
        AtomicID::registerId(-1024,"q")+
        AtomicID::registerId(-1025,"r")+
        AtomicID::registerId(-1026,"s")+
        AtomicID::registerId(-1027,"t")+
        AtomicID::registerId(-1028,"u")+
        AtomicID::registerId(-1029,"v")+
        AtomicID::registerId(-1030,"w")+
        AtomicID::registerId(-1032,"x")+
        AtomicID::registerId(-1033,"y")+
        AtomicID::registerId(-1034,"z")+
        AtomicID::registerId(-1031,"dmiobjref")+
        TypeInfoReg::addToRegistry(-1031,TypeInfo(TypeInfo::OTHER,0))+
        AtomicID::registerId(-1003,"dminumarray")+
        TypeInfoReg::addToRegistry(-1003,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1003,__construct_DMINumArray)+
        AtomicID::registerId(-1006,"dmivec")+
        TypeInfoReg::addToRegistry(-1006,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1006,__construct_DMIVec)+
        AtomicID::registerId(-1002,"dmilist")+
        TypeInfoReg::addToRegistry(-1002,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1002,__construct_DMIList)+
        AtomicID::registerId(-1018,"dmirecord")+
        TypeInfoReg::addToRegistry(-1018,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1018,__construct_DMIRecord)+
        AtomicID::registerId(-1005,"dmihiid")+
        TypeInfoReg::addToRegistry(-1005,TypeInfo(TypeInfo::SPECIAL,sizeof(DMI::HIID),__new_DMIHIID,__delete_DMIHIID,__copy_DMIHIID,
                __pack_DMIHIID,__unpack_DMIHIID,__packsize_DMIHIID))+
        AtomicID::registerId(-1001,"dmitimestamp")+
        TypeInfoReg::addToRegistry(-1001,TypeInfo(TypeInfo::BINARY,sizeof(DMI::Timestamp)))+
        AtomicID::registerId(-32,"bool")+
        TypeInfoReg::addToRegistry(-32,TypeInfo(TypeInfo::NUMERIC,sizeof(bool)))+
        AtomicID::registerId(-33,"char")+
        TypeInfoReg::addToRegistry(-33,TypeInfo(TypeInfo::NUMERIC,sizeof(char)))+
        AtomicID::registerId(-34,"uchar")+
        TypeInfoReg::addToRegistry(-34,TypeInfo(TypeInfo::NUMERIC,sizeof(uchar)))+
        AtomicID::registerId(-35,"short")+
        TypeInfoReg::addToRegistry(-35,TypeInfo(TypeInfo::NUMERIC,sizeof(short)))+
        AtomicID::registerId(-36,"ushort")+
        TypeInfoReg::addToRegistry(-36,TypeInfo(TypeInfo::NUMERIC,sizeof(ushort)))+
        AtomicID::registerId(-37,"int")+
        TypeInfoReg::addToRegistry(-37,TypeInfo(TypeInfo::NUMERIC,sizeof(int)))+
        AtomicID::registerId(-38,"uint")+
        TypeInfoReg::addToRegistry(-38,TypeInfo(TypeInfo::NUMERIC,sizeof(uint)))+
        AtomicID::registerId(-39,"long")+
        TypeInfoReg::addToRegistry(-39,TypeInfo(TypeInfo::NUMERIC,sizeof(long)))+
        AtomicID::registerId(-40,"ulong")+
        TypeInfoReg::addToRegistry(-40,TypeInfo(TypeInfo::NUMERIC,sizeof(ulong)))+
        AtomicID::registerId(-41,"longlong")+
        TypeInfoReg::addToRegistry(-41,TypeInfo(TypeInfo::NUMERIC,sizeof(longlong)))+
        AtomicID::registerId(-42,"ulonglong")+
        TypeInfoReg::addToRegistry(-42,TypeInfo(TypeInfo::NUMERIC,sizeof(ulonglong)))+
        AtomicID::registerId(-43,"float")+
        TypeInfoReg::addToRegistry(-43,TypeInfo(TypeInfo::NUMERIC,sizeof(float)))+
        AtomicID::registerId(-44,"double")+
        TypeInfoReg::addToRegistry(-44,TypeInfo(TypeInfo::NUMERIC,sizeof(double)))+
        AtomicID::registerId(-45,"ldouble")+
        TypeInfoReg::addToRegistry(-45,TypeInfo(TypeInfo::NUMERIC,sizeof(ldouble)))+
        AtomicID::registerId(-46,"fcomplex")+
        TypeInfoReg::addToRegistry(-46,TypeInfo(TypeInfo::NUMERIC,sizeof(fcomplex)))+
        AtomicID::registerId(-47,"dcomplex")+
        TypeInfoReg::addToRegistry(-47,TypeInfo(TypeInfo::NUMERIC,sizeof(dcomplex)))+
        AtomicID::registerId(-48,"string")+
        TypeInfoReg::addToRegistry(-48,TypeInfo(TypeInfo::SPECIAL,sizeof(string),__new_string,__delete_string,__copy_string,
                __pack_string,__unpack_string,__packsize_string))+
        AtomicID::registerId(-1004,"dmiatomicid")+
        TypeInfoReg::addToRegistry(-1004,TypeInfo(TypeInfo::BINARY,sizeof(DMI::AtomicID)))+
    0;
    return res;
  }
  
  int __dum_call_registries_for_DMI = aidRegistry_DMI();

