#define NC_SKIP_HOOKS 1
    // This file is generated automatically -- do not edit
    // Generated by /home/oms/LOFAR/DMI/src/build_aid_maps.pl
    #include "DMI/AtomicID.h"
    #include "DMI/TypeInfo.h"
    #include "DMI/DynamicTypeManager.h"
    #include "DMI/Packer.h"

    int aidRegistry_DMI ()
    {
      return 1;
    }

static AtomicID::Register aid_reg_A(-396,"A");
static AtomicID::Register aid_reg_B(-397,"B");
static AtomicID::Register aid_reg_C(-398,"C");
static AtomicID::Register aid_reg_D(-399,"D");
static AtomicID::Register aid_reg_E(-400,"E");
static AtomicID::Register aid_reg_F(-401,"F");
static AtomicID::Register aid_reg_G(-402,"G");
static AtomicID::Register aid_reg_H(-403,"H");
static AtomicID::Register aid_reg_I(-404,"I");
static AtomicID::Register aid_reg_J(-405,"J");
static AtomicID::Register aid_reg_K(-406,"K");
static AtomicID::Register aid_reg_L(-407,"L");
static AtomicID::Register aid_reg_M(-408,"M");
static AtomicID::Register aid_reg_N(-409,"N");
static AtomicID::Register aid_reg_O(-410,"O");
static AtomicID::Register aid_reg_P(-411,"P");
static AtomicID::Register aid_reg_Q(-412,"Q");
static AtomicID::Register aid_reg_R(-413,"R");
static AtomicID::Register aid_reg_S(-414,"S");
static AtomicID::Register aid_reg_T(-415,"T");
static AtomicID::Register aid_reg_U(-416,"U");
static AtomicID::Register aid_reg_V(-417,"V");
static AtomicID::Register aid_reg_W(-418,"W");
static AtomicID::Register aid_reg_X(-420,"X");
static AtomicID::Register aid_reg_Y(-421,"Y");
static AtomicID::Register aid_reg_Z(-422,"Z");
static AtomicID::Register aid_reg_ObjRef(-394,"ObjRef");
static TypeInfoReg::Register ti_reg_ObjRef(-394,TypeInfo(TypeInfo::OTHER,0));
static AtomicID::Register aid_reg_DataArray(-393,"DataArray");
#include "DataArray.h"
static TypeInfoReg::Register ti_reg_DataArray(-393,TypeInfo(TypeInfo::DYNAMIC,0));
BlockableObject * __construct_DataArray (int n) { return n>0 ? new DataArray [n] : new DataArray; }
static DynamicTypeManager::Register dtm_reg_DataArray(-393,__construct_DataArray);
static AtomicID::Register aid_reg_DataField(-423,"DataField");
#include "DataField.h"
static TypeInfoReg::Register ti_reg_DataField(-423,TypeInfo(TypeInfo::DYNAMIC,0));
BlockableObject * __construct_DataField (int n) { return n>0 ? new DataField [n] : new DataField; }
static DynamicTypeManager::Register dtm_reg_DataField(-423,__construct_DataField);
static AtomicID::Register aid_reg_DataRecord(-395,"DataRecord");
#include "DataRecord.h"
static TypeInfoReg::Register ti_reg_DataRecord(-395,TypeInfo(TypeInfo::DYNAMIC,0));
BlockableObject * __construct_DataRecord (int n) { return n>0 ? new DataRecord [n] : new DataRecord; }
static DynamicTypeManager::Register dtm_reg_DataRecord(-395,__construct_DataRecord);
static AtomicID::Register aid_reg_HIID(-419,"HIID");
#include "HIID.h"
        void * __new_HIID  (int n) 
        { return new HIID [n]; }  
        void __delete_HIID (void *ptr) 
        { delete [] static_cast<HIID*>(ptr); } 
        void __copy_HIID (void *to,const void *from) 
        { *static_cast<HIID*>(to) = *static_cast<const HIID*>(from); } 
        size_t __pack_HIID (const void *arr,int n,void * block,size_t &nleft ) 
        { return ArrayPacker<HIID>::pack(static_cast<const HIID*>(arr),n,block,nleft); } 
        void * __unpack_HIID (const void *block,size_t sz,int &n) 
        { return ArrayPacker<HIID>::unpack(block,sz,n); } 
        size_t __packsize_HIID (const void *arr,int n) 
        { return ArrayPacker<HIID>::packSize(static_cast<const HIID*>(arr),n); }
static TypeInfoReg::Register ti_reg_HIID(-419,TypeInfo(TypeInfo::SPECIAL,sizeof(HIID),__new_HIID,__delete_HIID,__copy_HIID,
                __pack_HIID,__unpack_HIID,__packsize_HIID));
static AtomicID::Register aid_reg_Timestamp(-85,"Timestamp");
#include "Timestamp.h"
static TypeInfoReg::Register ti_reg_Timestamp(-85,TypeInfo(TypeInfo::BINARY,sizeof(Timestamp)));
static AtomicID::Register aid_reg_char(-10,"char");
static TypeInfoReg::Register ti_reg_char(-10,TypeInfo(TypeInfo::NUMERIC,sizeof(char)));
static AtomicID::Register aid_reg_uchar(-11,"uchar");
static TypeInfoReg::Register ti_reg_uchar(-11,TypeInfo(TypeInfo::NUMERIC,sizeof(uchar)));
static AtomicID::Register aid_reg_short(-12,"short");
static TypeInfoReg::Register ti_reg_short(-12,TypeInfo(TypeInfo::NUMERIC,sizeof(short)));
static AtomicID::Register aid_reg_ushort(-13,"ushort");
static TypeInfoReg::Register ti_reg_ushort(-13,TypeInfo(TypeInfo::NUMERIC,sizeof(ushort)));
static AtomicID::Register aid_reg_int(-14,"int");
static TypeInfoReg::Register ti_reg_int(-14,TypeInfo(TypeInfo::NUMERIC,sizeof(int)));
static AtomicID::Register aid_reg_uint(-15,"uint");
static TypeInfoReg::Register ti_reg_uint(-15,TypeInfo(TypeInfo::NUMERIC,sizeof(uint)));
static AtomicID::Register aid_reg_long(-16,"long");
static TypeInfoReg::Register ti_reg_long(-16,TypeInfo(TypeInfo::NUMERIC,sizeof(long)));
static AtomicID::Register aid_reg_ulong(-17,"ulong");
static TypeInfoReg::Register ti_reg_ulong(-17,TypeInfo(TypeInfo::NUMERIC,sizeof(ulong)));
static AtomicID::Register aid_reg_longlong(-18,"longlong");
static TypeInfoReg::Register ti_reg_longlong(-18,TypeInfo(TypeInfo::NUMERIC,sizeof(longlong)));
static AtomicID::Register aid_reg_ulonglong(-19,"ulonglong");
static TypeInfoReg::Register ti_reg_ulonglong(-19,TypeInfo(TypeInfo::NUMERIC,sizeof(ulonglong)));
static AtomicID::Register aid_reg_float(-20,"float");
static TypeInfoReg::Register ti_reg_float(-20,TypeInfo(TypeInfo::NUMERIC,sizeof(float)));
static AtomicID::Register aid_reg_double(-21,"double");
static TypeInfoReg::Register ti_reg_double(-21,TypeInfo(TypeInfo::NUMERIC,sizeof(double)));
static AtomicID::Register aid_reg_ldouble(-22,"ldouble");
static TypeInfoReg::Register ti_reg_ldouble(-22,TypeInfo(TypeInfo::NUMERIC,sizeof(ldouble)));
static AtomicID::Register aid_reg_fcomplex(-23,"fcomplex");
static TypeInfoReg::Register ti_reg_fcomplex(-23,TypeInfo(TypeInfo::NUMERIC,sizeof(fcomplex)));
static AtomicID::Register aid_reg_dcomplex(-24,"dcomplex");
static TypeInfoReg::Register ti_reg_dcomplex(-24,TypeInfo(TypeInfo::NUMERIC,sizeof(dcomplex)));
static AtomicID::Register aid_reg_bool(-25,"bool");
static TypeInfoReg::Register ti_reg_bool(-25,TypeInfo(TypeInfo::NUMERIC,sizeof(bool)));
static AtomicID::Register aid_reg_string(-29,"string");
        void * __new_string  (int n) 
        { return new string [n]; }  
        void __delete_string (void *ptr) 
        { delete [] static_cast<string*>(ptr); } 
        void __copy_string (void *to,const void *from) 
        { *static_cast<string*>(to) = *static_cast<const string*>(from); } 
        size_t __pack_string (const void *arr,int n,void * block,size_t &nleft ) 
        { return ArrayPacker<string>::pack(static_cast<const string*>(arr),n,block,nleft); } 
        void * __unpack_string (const void *block,size_t sz,int &n) 
        { return ArrayPacker<string>::unpack(block,sz,n); } 
        size_t __packsize_string (const void *arr,int n) 
        { return ArrayPacker<string>::packSize(static_cast<const string*>(arr),n); }
static TypeInfoReg::Register ti_reg_string(-29,TypeInfo(TypeInfo::SPECIAL,sizeof(string),__new_string,__delete_string,__copy_string,
                __pack_string,__unpack_string,__packsize_string));
static AtomicID::Register aid_reg_Array_int(-34,"Array_int");
static TypeInfoReg::Register ti_reg_Array_int(-34,TypeInfo(TypeInfo::INTERMEDIATE,0));
static AtomicID::Register aid_reg_Array_float(-40,"Array_float");
static TypeInfoReg::Register ti_reg_Array_float(-40,TypeInfo(TypeInfo::INTERMEDIATE,0));
static AtomicID::Register aid_reg_Array_double(-41,"Array_double");
static TypeInfoReg::Register ti_reg_Array_double(-41,TypeInfo(TypeInfo::INTERMEDIATE,0));
static AtomicID::Register aid_reg_Array_fcomplex(-43,"Array_fcomplex");
static TypeInfoReg::Register ti_reg_Array_fcomplex(-43,TypeInfo(TypeInfo::INTERMEDIATE,0));
static AtomicID::Register aid_reg_Array_dcomplex(-44,"Array_dcomplex");
static TypeInfoReg::Register ti_reg_Array_dcomplex(-44,TypeInfo(TypeInfo::INTERMEDIATE,0));
static AtomicID::Register aid_reg_Array_bool(-45,"Array_bool");
static TypeInfoReg::Register ti_reg_Array_bool(-45,TypeInfo(TypeInfo::INTERMEDIATE,0));
static AtomicID::Register aid_reg_AtomicID(-392,"AtomicID");
#include "TypeId.h"
static TypeInfoReg::Register ti_reg_AtomicID(-392,TypeInfo(TypeInfo::BINARY,sizeof(AtomicID)));

