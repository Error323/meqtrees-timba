//  DataArray.cc: DMI Array class (using AIPS++ Arrays)
//
//  Copyright (C) 2002
//  ASTRON (Netherlands Foundation for Research in Astronomy)
//  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  $Id$
//
//  $Log$
//  Revision 1.14  2002/10/29 16:28:17  smirnov
//  %[BugId: 26]%
//  Added missing TypeIter-DMI.h file.
//  Removed spurious #include of BlockSet1.h (thanks a lot, Rose...)
//
//  Revision 1.13  2002/10/29 13:10:38  smirnov
//  %[BugId: 26]%
//  Re-worked build_aid_maps.pl and TypeIterMacros.h to enable on-demand
//  importing of data types from other packages. Basically, data types from package
//  X will be pulled in by NestableContainer only when included from
//  package Y that has an explicit dependence on package X. DMI itself depends
//  only on Common.
//
//  Migrated to new Rose C++ add-in, so all Rose markup has changed.
//
//  Revision 1.12  2002/06/11 12:15:08  smirnov
//  %[BugId: 26]%
//  Further fixes to array-mode hook addressing.
//  Added an optional tid argument to NestableContainer::size().
//
//  Revision 1.11  2002/06/10 12:39:18  smirnov
//  %[BugId: 26]%
//  Revised NestableContainer::get() interface to return info in a ContentInfo
//  structure.
//  Added optional size argument to hook.as_type_p() and _wp() methods.
//  Cleaned up size handling, added working as_vector<T> and =(vector<T>).
//
//  Revision 1.10  2002/06/07 14:22:48  smirnov
//  %[BugId: 26]%
//  Many revisions related to support of arrays and vectors (including AIPS++) by
//  hooks. Checking in now because I plan to modify the NestableContainer interface.
//
//  Revision 1.9  2002/05/30 12:15:13  diepen
//
//  %[BugId: 25]%
//  Added the required constructors
//
//  Revision 1.8  2002/05/14 09:48:00  gvd
//  Removed public which was left in
//
//  Revision 1.7  2002/05/07 13:48:52  oms
//  Minor fixes for the new build environment.
//  The code has been re-generated by Rose, hence the world+dog has
//  been updated.
//
//  Revision 1.6  2002/05/07 11:46:00  gvd
//  The 'final' version supporting array subsets
//
//  Revision 1.5  2002/04/17 12:19:31  oms
//  Added the "Intermediate" type category (for Array_xxx) and support for it
//  in hooks.
//
//  Revision 1.4  2002/04/12 10:15:09  oms
//  Added fcomplex and dcomplex types.
//  Changes to NestableContainer::get():
//   - merged autoprivatize and must_write args into a single flags arg
//   - added NC_SCALAR and NC_POINTER flags that are passed to get()
//  Got rid of isScalar() and isContiguous(), checking is now up to get().
//
//  Revision 1.3  2002/04/12 07:47:53  oms
//  Added fcomplex and dcomplex types
//
//  Revision 1.2  2002/04/08 14:27:07  oms
//  Added isScalar(tid) to DataArray.
//  Fixed isContiguous() in DataField.
//
//  Revision 1.1  2002/04/05 13:05:46  gvd
//  First version
//


#ifndef DMI_DATAARRAY_H
#define DMI_DATAARRAY_H

#include "DMI/Common.h"
#include "DMI/DMI.h"

#pragma types #DataArray

#include "DMI/NestableContainer.h"
#include "DMI/HIID.h"
#include "DMI/SmartBlock.h"

#include <aips/Arrays/Array.h>

//##ModelId=3DB949AE00C5
class DataArray : public NestableContainer
{
public:
  // Create the object without an array in it.
    //##ModelId=3DB949AE039F
  explicit DataArray (int flags = DMI::WRITE);

  // Create the object with an array of the given shape.
    //##ModelId=3DB949AE03A4
  DataArray (TypeId type, const IPosition& shape, int flags = DMI::WRITE,
	     int shm_flags = 0);

  // Create the object with an array of the given shape.
//   explicit DataArray (const Array<bool>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<int>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<float>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<double>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<fcomplex>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<dcomplex>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   
  template<class T>
  explicit DataArray (const Array<T>& array, int flags = DMI::WRITE,
		      int shm_flags = 0);

  // Copy (copy semantics).
    //##ModelId=3DB949AE03AF
  DataArray (const DataArray& other, int flags = 0, int depth = 0);

    //##ModelId=3DB949AE03B8
  ~DataArray();

  // Assignment (copy semantics).
    //##ModelId=3DB949AE03B9
  DataArray& operator= (const DataArray& other);

  // Return the object type (TpDataArray).
    //##ModelId=3DB949AE03BE
  virtual TypeId objectType() const;

  // Reconstruct the DataArray object from a BlockSet.
    //##ModelId=3DB949AE03C0
  virtual int fromBlock (BlockSet& set);

  // Add the DataArray object to the BlockSet.
    //##ModelId=3DB949AE03C5
  virtual int toBlock (BlockSet& set) const;

  // Clone the object.
    //##ModelId=3DB949AE03CB
  virtual CountedRefTarget* clone (int flags = 0, int depth = 0) const;

  // Privatize the object.
    //##ModelId=3DB949AE03D2
  virtual void privatize (int flags = 0, int depth = 0);

  // Get the 
    //##ModelId=3DB949AE03DA
  virtual const void* get (const HIID& id, ContentInfo &info,
			   TypeId check_tid = 0, int flags = 0) const;

  // Insertion is not possible (throws exception).
    //##ModelId=3DB949AE03E5
  virtual void* insert (const HIID& id, TypeId tid, TypeId& real_tid);

  // The size is the number of array elements.
    //##ModelId=3DB949AF0007
  virtual int size (TypeId tid = 0) const;

  // The actual type of the array (TpArray_float, etc.).
    //##ModelId=3DB949AF000C
  virtual TypeId type() const;
  
  // Parse a HIID describing a subset and fill start,end,incr.
  // It fills in keepAxes telling if an axes should always be kept,
  // even if it is degenerated (i.e. has length 1).
  // It returns true if axes can be removed.
    //##ModelId=3DB949AF000E
  bool parseHIID (const HIID& id, IPosition& st, IPosition& end,
		  IPosition& incr, IPosition& keepAxes) const;
  
    //##ModelId=3DB949AF001C
  DefineRefTypes(DataArray,Ref);

      
private:
  // The object is valid if it contains an array.
    //##ModelId=3DB949AF0022
  bool valid() const 
    { return itsArray; }

  // Initialize internal shape and create array using the given shape.
    //##ModelId=3DB949AF0024
  void init (const IPosition& shape);

  // Initialize shape and create array using internal shape.
    //##ModelId=3DB949AF0029
  void reinit();

  // Create the actual Array object.
  // It is created from the array data part in the SmartBlock.
    //##ModelId=3DB949AF002B
  void makeArray();

  // Clear the object (thus remove the Array).
    //##ModelId=3DB949AF002C
  void clear();

  // Clone the object.
    //##ModelId=3DB949AF002E
  void cloneOther (const DataArray& other, int flags = 0, int depth = 0);

  // Accessor functions to array type and size kept in the SmartBlock.
    //##ModelId=3DB949AF0037
  int headerType() const
    { return static_cast<const int*>(*itsData.deref())[0]; }
    //##ModelId=3DB949AF003A
  int headerSize() const
    { return static_cast<const int*>(*itsData.deref())[1]; }
    //##ModelId=3DB949AF003C
  void setHeaderType (int type)
    { static_cast<int*>(*itsData.dewr())[0] = type; }
    //##ModelId=3DB949AF0041
  void setHeaderSize (int size)
    { static_cast<int*>(*itsData.dewr())[1] = size; }


    //##ModelId=3DB949AE036D
  IPosition  itsShape;          // actual shape
    //##ModelId=3DB949AE0379
  TypeId     itsScaType;        // scalar data type matching the array type
    //##ModelId=3DB949AE0383
  int        itsElemSize;       // #bytes of an array element
    //##ModelId=3DB949AE0389
  int        itsDataOffset;     // array data offset in SmartBlock
    //##ModelId=3DB949AE038E
  char*      itsArrayData;      // pointer to array data in SmartBlock
    //##ModelId=3DB949AE0394
  void*      itsArray;          // pointer to the Array object
    //##ModelId=3DB949AE039A
  void*      itsSubArray;       // pointer to Array object holding a subarray
    //##ModelId=3DB949AE0370
    BlockRef itsData;

};

DefineRefTypes(DataArray,DataArrayRef);

#endif
