#ifndef TypeIterMacros_h
#define TypeIterMacros_h 1
// This file is generated automatically -- do not edit
// Generated by /home/oms/LOFAR/DMI/src/build_type_iter.pl

// defines macros for repeating some operation for every type



#define DoForAllBinaryTypes(Do,arg) \
        Do(Timestamp,arg); \
        Do(AtomicID,arg)
#define DoForAllBinaryTypes1(Do,arg) \
        Do(Timestamp,arg), \
        Do(AtomicID,arg)

#define DoForAllDynamicTypes(Do,arg) \
        Do(DataArray,arg); \
        Do(DataRecord,arg); \
        Do(DataField,arg); \
        Do(Message,arg)
#define DoForAllDynamicTypes1(Do,arg) \
        Do(DataArray,arg), \
        Do(DataRecord,arg), \
        Do(DataField,arg), \
        Do(Message,arg)

#define DoForAllNumericTypes(Do,arg) \
        Do(char,arg); \
        Do(uchar,arg); \
        Do(short,arg); \
        Do(ushort,arg); \
        Do(int,arg); \
        Do(uint,arg); \
        Do(long,arg); \
        Do(ulong,arg); \
        Do(longlong,arg); \
        Do(ulonglong,arg); \
        Do(float,arg); \
        Do(double,arg); \
        Do(ldouble,arg); \
        Do(fcomplex,arg); \
        Do(dcomplex,arg); \
        Do(bool,arg)
#define DoForAllNumericTypes1(Do,arg) \
        Do(char,arg), \
        Do(uchar,arg), \
        Do(short,arg), \
        Do(ushort,arg), \
        Do(int,arg), \
        Do(uint,arg), \
        Do(long,arg), \
        Do(ulong,arg), \
        Do(longlong,arg), \
        Do(ulonglong,arg), \
        Do(float,arg), \
        Do(double,arg), \
        Do(ldouble,arg), \
        Do(fcomplex,arg), \
        Do(dcomplex,arg), \
        Do(bool,arg)

#define DoForAllIntermediateTypes(Do,arg) \
        Do(Array_int,arg); \
        Do(Array_float,arg); \
        Do(Array_double,arg); \
        Do(Array_fcomplex,arg); \
        Do(Array_dcomplex,arg); \
        Do(Array_bool,arg)
#define DoForAllIntermediateTypes1(Do,arg) \
        Do(Array_int,arg), \
        Do(Array_float,arg), \
        Do(Array_double,arg), \
        Do(Array_fcomplex,arg), \
        Do(Array_dcomplex,arg), \
        Do(Array_bool,arg)

#define DoForAllOtherTypes(Do,arg) \
        Do(ObjRef,arg)
#define DoForAllOtherTypes1(Do,arg) \
        Do(ObjRef,arg)

#define DoForAllSpecialTypes(Do,arg) \
        Do(string,arg); \
        Do(HIID,arg)
#define DoForAllSpecialTypes1(Do,arg) \
        Do(string,arg), \
        Do(HIID,arg)

#define DoForAllTypes(Do,arg) \
        DoForAllBinaryTypes(Do,arg); \
        DoForAllDynamicTypes(Do,arg); \
        DoForAllNumericTypes(Do,arg); \
        DoForAllIntermediateTypes(Do,arg); \
        DoForAllOtherTypes(Do,arg); \
        DoForAllSpecialTypes(Do,arg)

#define DoForAllTypes1(Do,arg) \
        DoForAllBinaryTypes1(Do,arg), \
        DoForAllDynamicTypes1(Do,arg), \
        DoForAllNumericTypes1(Do,arg), \
        DoForAllIntermediateTypes1(Do,arg), \
        DoForAllOtherTypes1(Do,arg), \
        DoForAllSpecialTypes1(Do,arg)

#endif
