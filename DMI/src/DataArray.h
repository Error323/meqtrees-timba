//  DataArray.cc: DMI Array class (using AIPS++ Arrays)
//
//  Copyright (C) 2002
//  ASTRON (Netherlands Foundation for Research in Astronomy)
//  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  $Id$
//
//  $Log$
//  Revision 1.17  2002/12/06 15:29:02  smirnov
//  %[BugId: 112]%
//  Fixed some bugs in the AIPS++ hooks;
//  fixed size returned from DataRecord iterator.
//
//  Revision 1.16  2002/12/05 10:15:22  smirnov
//  %[BugId: 112]%
//  Fixed Lorray support in DataArrays, etc.
//  Revised AIPS++ hooks.
//
//  Revision 1.15  2002/12/03 20:36:14  smirnov
//  %[BugId: 112]%
//  Ported DMI to use Lorrays (with blitz arrays)
//
//  Revision 1.14  2002/10/29 16:28:17  smirnov
//  %[BugId: 26]%
//  Added missing TypeIter-DMI.h file.
//  Removed spurious #include of BlockSet1.h (thanks a lot, Rose...)
//
//  Revision 1.13  2002/10/29 13:10:38  smirnov
//  %[BugId: 26]%
//  Re-worked build_aid_maps.pl and TypeIterMacros.h to enable on-demand
//  importing of data types from other packages. Basically, data types from package
//  X will be pulled in by NestableContainer only when included from
//  package Y that has an explicit dependence on package X. DMI itself depends
//  only on Common.
//
//  Migrated to new Rose C++ add-in, so all Rose markup has changed.
//
//  Revision 1.12  2002/06/11 12:15:08  smirnov
//  %[BugId: 26]%
//  Further fixes to array-mode hook addressing.
//  Added an optional tid argument to NestableContainer::size().
//
//  Revision 1.11  2002/06/10 12:39:18  smirnov
//  %[BugId: 26]%
//  Revised NestableContainer::get() interface to return info in a ContentInfo
//  structure.
//  Added optional size argument to hook.as_type_p() and _wp() methods.
//  Cleaned up size handling, added working as_vector<T> and =(vector<T>).
//
//  Revision 1.10  2002/06/07 14:22:48  smirnov
//  %[BugId: 26]%
//  Many revisions related to support of arrays and vectors (including AIPS++) by
//  hooks. Checking in now because I plan to modify the NestableContainer interface.
//
//  Revision 1.9  2002/05/30 12:15:13  diepen
//
//  %[BugId: 25]%
//  Added the required constructors
//
//  Revision 1.8  2002/05/14 09:48:00  gvd
//  Removed public which was left in
//
//  Revision 1.7  2002/05/07 13:48:52  oms
//  Minor fixes for the new build environment.
//  The code has been re-generated by Rose, hence the world+dog has
//  been updated.
//
//  Revision 1.6  2002/05/07 11:46:00  gvd
//  The 'final' version supporting array subsets
//
//  Revision 1.5  2002/04/17 12:19:31  oms
//  Added the "Intermediate" type category (for Array_xxx) and support for it
//  in hooks.
//
//  Revision 1.4  2002/04/12 10:15:09  oms
//  Added fcomplex and dcomplex types.
//  Changes to NestableContainer::get():
//   - merged autoprivatize and must_write args into a single flags arg
//   - added NC_SCALAR and NC_POINTER flags that are passed to get()
//  Got rid of isScalar() and isContiguous(), checking is now up to get().
//
//  Revision 1.3  2002/04/12 07:47:53  oms
//  Added fcomplex and dcomplex types
//
//  Revision 1.2  2002/04/08 14:27:07  oms
//  Added isScalar(tid) to DataArray.
//  Fixed isContiguous() in DataField.
//
//  Revision 1.1  2002/04/05 13:05:46  gvd
//  First version
//


#ifndef DMI_DATAARRAY_H
#define DMI_DATAARRAY_H

#include "Common/Lorrays.h"
#include "Common/Thread/Mutex.h"
#include "Common/Thread/Key.h"
#include "DMI/Common.h"
#include "DMI/DMI.h"
#include "DMI/NestableContainer.h"
#include "DMI/HIID.h"
#include "DMI/SmartBlock.h"

#ifdef HAVE_AIPSPP
#include <aips/Arrays.h>
#endif

#pragma types #DataArray


// We assume Blitz support here, AIPS++ can be re-integrated later
#ifndef LORRAYS_USE_BLITZ
  #error This version of DataArray requires Blitz Lorrays
#endif

//##ModelId=3DB949AE00C5
class DataArray : public NestableContainer
{
public:
  // Create the object without an array in it.
    //##ModelId=3DB949AE039F
  explicit DataArray (int flags = DMI::WRITE);

  // Create the object with an array of the given shape.
    //##ModelId=3DB949AE03A4
  DataArray (TypeId type, const LoShape & shape, int flags = DMI::WRITE,
	     int shm_flags = 0);

  // Create the object with an array of the given shape.
//   explicit DataArray (const Array<bool>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<int>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<float>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<double>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<fcomplex>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   explicit DataArray (const Array<dcomplex>& array, int flags = DMI::WRITE,
// 		      int shm_flags = 0);
//   
  // templated method to create a copy of the given Lorray.
  // We make use of the fact that a Lorray(N,T) is actually a blitz::Array<T,N>.
  // Hence this templated definition is equivalent to a bunch of non-templated
  // ones, each with its own type and rank.
  // For non-templated compilers, this can be redefined using the DoFor...()
  // type iterator macros
  template<class T,int N>
  explicit DataArray (const blitz::Array<T,N> & array, int flags = DMI::WRITE,
		      int shm_flags = 0);

#ifdef HAVE_AIPSPP
  // templated method to create a copy of the given AIPS++ array
  template<class T>
  explicit DataArray (const Array<T> & array, int flags = DMI::WRITE,
		      int shm_flags = 0);
#endif

  // Copy (copy semantics).
    //##ModelId=3DB949AE03AF
  DataArray (const DataArray& other, int flags = 0, int depth = 0);

    //##ModelId=3DB949AE03B8
  ~DataArray();

  // Assignment (copy semantics).
    //##ModelId=3DB949AE03B9
  DataArray& operator= (const DataArray& other);

  // True if the object contains an initialized array
  //##ModelId=3DB949AF0022
  bool valid() const;
      
  // returns rank of array
  int rank () const;
  
  // returns shape of array
  const LoShape & shape () const;
  
  // returns type of array element
  // (the virtual type() method, below, overriding the abstract one in 
  // NestableContainer, will return the array type)
  TypeId elementType () const;
  
#ifdef HAVE_AIPSPP
  // Returns contents as an AIPS++ array (by copy or reference)
  // The dummy T* argument is to help in template instantiation
  // (gcc has a problem resolving stuff like:
  //
  //    template<class T> T function_one ();
  //    template<class T> T function_two ()
  //    { return function_one<T>(); }
  //  ... the <T> in the invocation is considered an error. The dummy
  //  argument allows you to say "function_one((T*)0)" instead)
  template<class T>
  Array<T> refAipsArray (const T*);
  template<class T>
  Array<T> copyAipsArray (const T*) const;
#endif

  // Return the object type (TpDataArray).
    //##ModelId=3DB949AE03BE
  virtual TypeId objectType() const;

  // Reconstruct the DataArray object from a BlockSet.
    //##ModelId=3DB949AE03C0
  virtual int fromBlock (BlockSet& set);

  // Add the DataArray object to the BlockSet.
    //##ModelId=3DB949AE03C5
  virtual int toBlock (BlockSet& set) const;

  // Clone the object.
    //##ModelId=3DB949AE03CB
  virtual CountedRefTarget* clone (int flags = 0, int depth = 0) const;

  // Privatize the object.
    //##ModelId=3DB949AE03D2
  virtual void privatize (int flags = 0, int depth = 0);

  // Get the 
    //##ModelId=3DB949AE03DA
  virtual const void* get (const HIID& id, ContentInfo &info,
			   TypeId check_tid = 0, int flags = 0) const;

  // Insertion is not possible (throws exception).
    //##ModelId=3DB949AE03E5
  virtual void* insert (const HIID& id, TypeId tid, TypeId& real_tid);

  // The size is the number of array elements.
    //##ModelId=3DB949AF0007
  virtual int size (TypeId tid = 0) const;

  // The actual type of the array (TpArray_float, etc.).
    //##ModelId=3DB949AF000C
  virtual TypeId type() const;
  
  // Parse a HIID describing a subset and fill start,end,incr.
  // NB: "end" is one past ending position at each axis: 
  //        i.e. [start,end) is the interval, using conventional notation.
  // It fills in keepAxes telling which axes should be kept in the
  // subarray. Returns number of axes to keep.
    //##ModelId=3DB949AF000E
  int parseHIID (const HIID& id, LoPos& st, LoPos& end,LoPos& incr, 
                 vector<bool> &keepAxes) const;
  
    //##ModelId=3DB949AF001C
  DefineRefTypes(DataArray,Ref);

  static const int NumTypes = Tpbool_int - Tpstring_int + 1;
  
private:
  // Initialize internal shape and create array using the given shape.
    //##ModelId=3DB949AF0024
  void init (const LoShape & shape,int flags);

  // Create the actual Array object.
  // It is created from the array data part in the SmartBlock.
    //##ModelId=3DB949AF002B
  void makeArray();

  // Clear the object (thus remove the Array).
    //##ModelId=3DB949AF002C
  void clear();

  // Clone the object.
    //##ModelId=3DB949AF002E
  void cloneOther (const DataArray& other, int flags = 0, int depth = 0);

    //##ModelId=3DB949AE036D
  LoShape    itsShape;          // actual shape
  
  TypeId     itsType;           // array TypeId
    //##ModelId=3DB949AE0379
  TypeId     itsScaType;        // scalar data type matching the array type
    //##ModelId=3DB949AE0383
  int        itsElemSize;       // #bytes of an array element
    //##ModelId=3DB949AE0389
  int        itsSize;           // total size of array (in elements)
  int        itsDataOffset;     // array data offset in SmartBlock
    //##ModelId=3DB949AE038E
  char*      itsArrayData;      // pointer to array data in SmartBlock
    //##ModelId=3DB949AE0394
  void *     itsArray;

  //##ModelId=3DB949AE0370
  BlockRef    itsData;

  // OK, setup some circus hoops. Rank & type of DataArray is set at runtime,
  // while for blitz arrays it's compile-time. So, for every blitz operation
  // required in DataArray, we'll setup an N(ranks) x N(types) matrix of 
  // function pointers, then use rank & type to call the appropriate function.
  // This matrix is called the "method table".
  
  // Methods for the method table are naturally implemented via
  // templates. Refer to DataArray.cc.
  
  // These are the actual method tables
  typedef void * (*AllocatorWithData)(void*,const LoShape &);
  typedef void * (*AllocatorDefault)();
  typedef void (*AssignWithStride)(void*,void *,const LoShape &,const LoShape &);
  typedef void (*Destructor)(void*);
  
  static AllocatorWithData    allocatorWithData   [NumTypes][MaxLorrayRank];
  static AllocatorDefault     allocatorDefault    [NumTypes][MaxLorrayRank];
  static AssignWithStride     assignerWithStride  [NumTypes][MaxLorrayRank];
  static Destructor           destructor          [NumTypes][MaxLorrayRank];
  
  // converts a type id into a numeric offset into the table above
  static int typeIndex (TypeId tid)
  { return Tpbool_int - tid.id(); }
  // These methods do a lookup & call into each method table
  static void * allocateArrayWithData (TypeId tid,void *data,const LoShape &shape )
  {
    return (*allocatorWithData[typeIndex(tid)][shape.size()-1])(data,shape);
  }
  static void assignWithStride (TypeId tid,void *ptr,void *data,const LoShape &shape,const LoShape &stride )
  {
    (*assignerWithStride[typeIndex(tid)][shape.size()-1])(ptr,data,shape,stride);
  }
  static void * allocateArrayDefault (TypeId tid,int rank)
  {
    return (*allocatorDefault[typeIndex(tid)][rank-1])();
  }
  static void destroyArray (TypeId tid,int rank,void *ptr)
  {
    (*destructor[typeIndex(tid)][rank-1])(ptr);
  }

  // Define the subarray object (for slicing into an array)
  typedef struct { void *ptr; int rank; }  SubArray;
#ifdef USE_THREADS
  // Each thread must have its own subarray pointer. Use a map to accomplish
  // this -- I would use thread keys, but the number is way too limited.
  typedef std::map<Thread::ThrID,SubArray> SubArrayMap;
  mutable SubArrayMap itsSubArrayMap;
  
  void initSubArray () const
  {}
#else
  // non-threaded mode -- keep a single entry
  mutable SubArray itsSubArray;
  
  void initSubArray () const
  { itsSubArray.ptr = 0; }
#endif
  // this helper function creates the subarray object with the given data,
  // shape & stride. 
  void * makeSubArray (void *data,const LoShape & shape,const LoShape &stride) const;
  
#ifdef HAVE_AIPSPP
  // helper function to implement templates below without resorting to a
  // specialization (which seems to cause redefined symbol trouble)
  template<class T>
  static bool isStringArray (const Array<T> &);
  void copyStringArray (const void *source);
#endif
};

DefineRefTypes(DataArray,DataArrayRef);

inline bool DataArray::valid () const
{
  return itsArray != 0 ;
}

    
// returns rank of array
inline int DataArray::rank () const
{
  return itsShape.size();
}
  
// returns shape of array
inline const LoShape & DataArray::shape () const
{
  return itsShape;
}
  
// returns type of array element
// (the virtual type() method, below, overriding the abstract one in 
// NestableContainer, will return the array type)
inline TypeId DataArray::elementType () const
{
  return itsScaType;
}

// templated constructor from a Blitz array
template<class T,int N>
DataArray::DataArray (const blitz::Array<T,N>& array,
		      int flags, int )  // shm_flags not yet used
: NestableContainer(flags&DMI::WRITE != 0),
  itsArray    (0)
{
  initSubArray();
  itsScaType  = typeIdOf(T);
  itsElemSize = sizeof(T);
  itsType     = typeIdOfArray(T,N);
  init(array.shape(),flags);
  // after an init, itsArray contains a valid array of the given shape,
  // so we can assign the other array to it, to copy the data over
  *static_cast<blitz::Array<T,N>*>(itsArray) = array;
}

#ifdef HAVE_AIPSPP
template<class T>
inline bool DataArray::isStringArray (const Array<T> &)
{ return False; }
  
template<>
inline bool DataArray::isStringArray (const Array<String> &)
{ return True; }

inline void DataArray::copyStringArray (const void *source)
{
  const String *data = static_cast<const String*>(source);
  string *dest = reinterpret_cast<string *>(itsArrayData),*end = dest + itsSize;
  for( ; dest < end; dest++,data++ )
    *dest = *data;
}

// templated constructor from an AIPS++ array
template<class T>
DataArray::DataArray (const Array<T> &array,int flags, int )  // shm_flags not yet used
: NestableContainer(flags&DMI::WRITE != 0),
  itsArray    (0)
{
  initSubArray();
  itsScaType  = isStringArray(array) ? Tpstring : typeIdOf(T);
  itsElemSize = isStringArray(array) ? sizeof(string) : sizeof(T);
  itsType     = TpArray(itsScaType,array.ndim());
  init(LoShape(array.shape()),flags);
  // after an init, itsArray contains a valid array of the given shape,
  // so we can copy the data over
  // BUG here! use a more efficient AIPS++ array iterator
  bool del;
  const T *data = array.getStorage(del);
  if( isStringArray(array) )
    copyStringArray(data);
  else
    memcpy(itsArrayData,data,itsSize*itsElemSize);
  array.freeStorage(data,del);
}


template<class T>
Array<T> DataArray::copyAipsArray (const T*) const
{
  FailWhen( !valid(),"invalid DataArray" );
  if( isStringArray(Array<T>()) )
  {
    FailWhen( itsScaType != Tpstring,"array type mismatch" );
    String *dest = new String[itsSize], *end = dest+itsSize;
    const string *src = reinterpret_cast<const string *>(itsArrayData);
    for( ; dest < end; dest++,src++ )
      *dest = *src;
    // The reinterpret_cast is necessary to prevent confusing the compiler.
    // In reality this code gets executed only when T=String
    return Array<T>(itsShape,reinterpret_cast<T*>(dest),TAKE_OVER);
  }
  else
  {
    FailWhen( itsScaType != typeIdOf(T),"array type mismatch" );
    return Array<T>(itsShape,reinterpret_cast<const T*>(itsArrayData));
  }
}

template<class T>
Array<T> DataArray::refAipsArray (const T*)
{
  FailWhen( !valid(),"invalid DataArray" );
  FailWhen( !isWritable(),"r/w access violation" );
  if( isStringArray(Array<T>()) )
    return copyAipsArray((T*)0);
  FailWhen( itsScaType != typeIdOf(T),"array type mismatch" );
  return Array<T>(itsShape,itsArrayData,SHARE);
}

#endif

#endif
