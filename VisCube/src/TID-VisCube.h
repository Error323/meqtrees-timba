      #ifndef TID_VisCube_h
      #define TID_VisCube_h 1
      
      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../TIMBA/DMI/aid/build_aid_maps.pl
      #include <DMI/TypeId.h>

      // should be called somewhere in order to link in the registry
      int aidRegistry_VisCube ();

#ifndef _defined_id_TpVisCubeColumnarTableTile
#define _defined_id_TpVisCubeColumnarTableTile 1
const DMI::TypeId TpVisCubeColumnarTableTile(-1281);// from /home/oms/LOFAR/TIMBA/VisCube/src/ColumnarTableTile.h:13
const int TpVisCubeColumnarTableTile_int = -1281;
namespace VisCube { class ColumnarTableTile; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::ColumnarTableTile> : public TypeTraits<VisCube::ColumnarTableTile>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeColumnarTableTile_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::ColumnarTableTile & ContainerReturnType;
                typedef const VisCube::ColumnarTableTile & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpVisCubeTableFormat
#define _defined_id_TpVisCubeTableFormat 1
const DMI::TypeId TpVisCubeTableFormat(-1302);    // from /home/oms/LOFAR/TIMBA/VisCube/src/TableFormat.h:9
const int TpVisCubeTableFormat_int = -1302;
namespace VisCube { class TableFormat; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::TableFormat> : public TypeTraits<VisCube::TableFormat>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeTableFormat_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::TableFormat & ContainerReturnType;
                typedef const VisCube::TableFormat & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpVisCubeVCube
#define _defined_id_TpVisCubeVCube 1
const DMI::TypeId TpVisCubeVCube(-1291);          // from /home/oms/LOFAR/TIMBA/VisCube/src/VCube.h:32
const int TpVisCubeVCube_int = -1291;
namespace VisCube { class VCube; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::VCube> : public TypeTraits<VisCube::VCube>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeVCube_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::VCube & ContainerReturnType;
                typedef const VisCube::VCube & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpVisCubeVCubeSet
#define _defined_id_TpVisCubeVCubeSet 1
const DMI::TypeId TpVisCubeVCubeSet(-1272);       // from /home/oms/LOFAR/TIMBA/VisCube/src/VCubeSet.h:9
const int TpVisCubeVCubeSet_int = -1272;
namespace VisCube { class VCubeSet; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::VCubeSet> : public TypeTraits<VisCube::VCubeSet>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeVCubeSet_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::VCubeSet & ContainerReturnType;
                typedef const VisCube::VCubeSet & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpVisCubeVTile
#define _defined_id_TpVisCubeVTile 1
const DMI::TypeId TpVisCubeVTile(-1282);          // from /home/oms/LOFAR/TIMBA/VisCube/src/VTile.h:32
const int TpVisCubeVTile_int = -1282;
namespace VisCube { class VTile; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::VTile> : public TypeTraits<VisCube::VTile>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeVTile_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::VTile & ContainerReturnType;
                typedef const VisCube::VTile & ContainerParamType;
              };
            };
#endif


#endif
