    // This file is generated automatically -- do not edit
    // Generated by /home/assendorp/LOFAR/autoconf_share/../Timba/DMI/aid/build_aid_maps.pl
    #include <DMI/AtomicID.h>
    #include <DMI/TypeInfo.h>
    #include <DMI/DynamicTypeManager.h>
    #include <DMI/Packer.h>
#include "Constant.h"
DMI::BObj * __construct_MeqConstant (int n) { return n>0 ? new Meq::Constant [n] : new Meq::Constant; }
#include "Parm.h"
DMI::BObj * __construct_MeqParm (int n) { return n>0 ? new Meq::Parm [n] : new Meq::Parm; }
#include "Freq.h"
DMI::BObj * __construct_MeqFreq (int n) { return n>0 ? new Meq::Freq [n] : new Meq::Freq; }
#include "Time.h"
DMI::BObj * __construct_MeqTime (int n) { return n>0 ? new Meq::Time [n] : new Meq::Time; }
#include "Selector.h"
DMI::BObj * __construct_MeqSelector (int n) { return n>0 ? new Meq::Selector [n] : new Meq::Selector; }
#include "Composer.h"
DMI::BObj * __construct_MeqComposer (int n) { return n>0 ? new Meq::Composer [n] : new Meq::Composer; }
#include "Add.h"
DMI::BObj * __construct_MeqAdd (int n) { return n>0 ? new Meq::Add [n] : new Meq::Add; }
#include "Subtract.h"
DMI::BObj * __construct_MeqSubtract (int n) { return n>0 ? new Meq::Subtract [n] : new Meq::Subtract; }
#include "Multiply.h"
DMI::BObj * __construct_MeqMultiply (int n) { return n>0 ? new Meq::Multiply [n] : new Meq::Multiply; }
#include "Divide.h"
DMI::BObj * __construct_MeqDivide (int n) { return n>0 ? new Meq::Divide [n] : new Meq::Divide; }
#include "Sin.h"
DMI::BObj * __construct_MeqSin (int n) { return n>0 ? new Meq::Sin [n] : new Meq::Sin; }
#include "Cos.h"
DMI::BObj * __construct_MeqCos (int n) { return n>0 ? new Meq::Cos [n] : new Meq::Cos; }
#include "Exp.h"
DMI::BObj * __construct_MeqExp (int n) { return n>0 ? new Meq::Exp [n] : new Meq::Exp; }
#include "Pow.h"
DMI::BObj * __construct_MeqPow (int n) { return n>0 ? new Meq::Pow [n] : new Meq::Pow; }
#include "Sqr.h"
DMI::BObj * __construct_MeqSqr (int n) { return n>0 ? new Meq::Sqr [n] : new Meq::Sqr; }
#include "Asin.h"
DMI::BObj * __construct_MeqAsin (int n) { return n>0 ? new Meq::Asin [n] : new Meq::Asin; }
#include "Acos.h"
DMI::BObj * __construct_MeqAcos (int n) { return n>0 ? new Meq::Acos [n] : new Meq::Acos; }
#include "Sqrt.h"
DMI::BObj * __construct_MeqSqrt (int n) { return n>0 ? new Meq::Sqrt [n] : new Meq::Sqrt; }
#include "Conj.h"
DMI::BObj * __construct_MeqConj (int n) { return n>0 ? new Meq::Conj [n] : new Meq::Conj; }
#include "ToComplex.h"
DMI::BObj * __construct_MeqToComplex (int n) { return n>0 ? new Meq::ToComplex [n] : new Meq::ToComplex; }
#include "Polar.h"
DMI::BObj * __construct_MeqPolar (int n) { return n>0 ? new Meq::Polar [n] : new Meq::Polar; }
#include "UVW.h"
DMI::BObj * __construct_MeqUVW (int n) { return n>0 ? new Meq::UVW [n] : new Meq::UVW; }
#include "LMN.h"
DMI::BObj * __construct_MeqLMN (int n) { return n>0 ? new Meq::LMN [n] : new Meq::LMN; }
#include "Log.h"
DMI::BObj * __construct_MeqLog (int n) { return n>0 ? new Meq::Log [n] : new Meq::Log; }
#include "Cosh.h"
DMI::BObj * __construct_MeqCosh (int n) { return n>0 ? new Meq::Cosh [n] : new Meq::Cosh; }
#include "Sinh.h"
DMI::BObj * __construct_MeqSinh (int n) { return n>0 ? new Meq::Sinh [n] : new Meq::Sinh; }
#include "Tan.h"
DMI::BObj * __construct_MeqTan (int n) { return n>0 ? new Meq::Tan [n] : new Meq::Tan; }
#include "Tanh.h"
DMI::BObj * __construct_MeqTanh (int n) { return n>0 ? new Meq::Tanh [n] : new Meq::Tanh; }
#include "StatPointSourceDFT.h"
DMI::BObj * __construct_MeqStatPointSourceDFT (int n) { return n>0 ? new Meq::StatPointSourceDFT [n] : new Meq::StatPointSourceDFT; }
#include "PointSourceDFT.h"
DMI::BObj * __construct_MeqPointSourceDFT (int n) { return n>0 ? new Meq::PointSourceDFT [n] : new Meq::PointSourceDFT; }
#include "Condeq.h"
DMI::BObj * __construct_MeqCondeq (int n) { return n>0 ? new Meq::Condeq [n] : new Meq::Condeq; }
#include "Solver.h"
DMI::BObj * __construct_MeqSolver (int n) { return n>0 ? new Meq::Solver [n] : new Meq::Solver; }
#include "Ceil.h"
DMI::BObj * __construct_MeqCeil (int n) { return n>0 ? new Meq::Ceil [n] : new Meq::Ceil; }
#include "Floor.h"
DMI::BObj * __construct_MeqFloor (int n) { return n>0 ? new Meq::Floor [n] : new Meq::Floor; }
#include "Atan.h"
DMI::BObj * __construct_MeqAtan (int n) { return n>0 ? new Meq::Atan [n] : new Meq::Atan; }
#include "Pow2.h"
DMI::BObj * __construct_MeqPow2 (int n) { return n>0 ? new Meq::Pow2 [n] : new Meq::Pow2; }
#include "Pow3.h"
DMI::BObj * __construct_MeqPow3 (int n) { return n>0 ? new Meq::Pow3 [n] : new Meq::Pow3; }
#include "Pow4.h"
DMI::BObj * __construct_MeqPow4 (int n) { return n>0 ? new Meq::Pow4 [n] : new Meq::Pow4; }
#include "Pow5.h"
DMI::BObj * __construct_MeqPow5 (int n) { return n>0 ? new Meq::Pow5 [n] : new Meq::Pow5; }
#include "Pow6.h"
DMI::BObj * __construct_MeqPow6 (int n) { return n>0 ? new Meq::Pow6 [n] : new Meq::Pow6; }
#include "Pow7.h"
DMI::BObj * __construct_MeqPow7 (int n) { return n>0 ? new Meq::Pow7 [n] : new Meq::Pow7; }
#include "Pow8.h"
DMI::BObj * __construct_MeqPow8 (int n) { return n>0 ? new Meq::Pow8 [n] : new Meq::Pow8; }
#include "Abs.h"
DMI::BObj * __construct_MeqAbs (int n) { return n>0 ? new Meq::Abs [n] : new Meq::Abs; }
#include "Fabs.h"
DMI::BObj * __construct_MeqFabs (int n) { return n>0 ? new Meq::Fabs [n] : new Meq::Fabs; }
#include "Norm.h"
DMI::BObj * __construct_MeqNorm (int n) { return n>0 ? new Meq::Norm [n] : new Meq::Norm; }
#include "Arg.h"
DMI::BObj * __construct_MeqArg (int n) { return n>0 ? new Meq::Arg [n] : new Meq::Arg; }
#include "Real.h"
DMI::BObj * __construct_MeqReal (int n) { return n>0 ? new Meq::Real [n] : new Meq::Real; }
#include "Imag.h"
DMI::BObj * __construct_MeqImag (int n) { return n>0 ? new Meq::Imag [n] : new Meq::Imag; }
#include "MergeFlags.h"
DMI::BObj * __construct_MeqMergeFlags (int n) { return n>0 ? new Meq::MergeFlags [n] : new Meq::MergeFlags; }
#include "ReqSeq.h"
DMI::BObj * __construct_MeqReqSeq (int n) { return n>0 ? new Meq::ReqSeq [n] : new Meq::ReqSeq; }
#include "Min.h"
DMI::BObj * __construct_MeqMin (int n) { return n>0 ? new Meq::Min [n] : new Meq::Min; }
#include "Max.h"
DMI::BObj * __construct_MeqMax (int n) { return n>0 ? new Meq::Max [n] : new Meq::Max; }
#include "Mean.h"
DMI::BObj * __construct_MeqMean (int n) { return n>0 ? new Meq::Mean [n] : new Meq::Mean; }
#include "Sum.h"
DMI::BObj * __construct_MeqSum (int n) { return n>0 ? new Meq::Sum [n] : new Meq::Sum; }
#include "Product.h"
DMI::BObj * __construct_MeqProduct (int n) { return n>0 ? new Meq::Product [n] : new Meq::Product; }
#include "NElements.h"
DMI::BObj * __construct_MeqNElements (int n) { return n>0 ? new Meq::NElements [n] : new Meq::NElements; }
#include "Stripper.h"
DMI::BObj * __construct_MeqStripper (int n) { return n>0 ? new Meq::Stripper [n] : new Meq::Stripper; }
#include "DataCollect.h"
DMI::BObj * __construct_MeqDataCollect (int n) { return n>0 ? new Meq::DataCollect [n] : new Meq::DataCollect; }
#include "DataConcat.h"
DMI::BObj * __construct_MeqDataConcat (int n) { return n>0 ? new Meq::DataConcat [n] : new Meq::DataConcat; }
#include "RandomNoise.h"
DMI::BObj * __construct_MeqRandomNoise (int n) { return n>0 ? new Meq::RandomNoise [n] : new Meq::RandomNoise; }
#include "GaussNoise.h"
DMI::BObj * __construct_MeqGaussNoise (int n) { return n>0 ? new Meq::GaussNoise [n] : new Meq::GaussNoise; }
#include "ZeroFlagger.h"
DMI::BObj * __construct_MeqZeroFlagger (int n) { return n>0 ? new Meq::ZeroFlagger [n] : new Meq::ZeroFlagger; }
#include "StdDev.h"
DMI::BObj * __construct_MeqStdDev (int n) { return n>0 ? new Meq::StdDev [n] : new Meq::StdDev; }
#include "WSum.h"
DMI::BObj * __construct_MeqWSum (int n) { return n>0 ? new Meq::WSum [n] : new Meq::WSum; }
#include "WMean.h"
DMI::BObj * __construct_MeqWMean (int n) { return n>0 ? new Meq::WMean [n] : new Meq::WMean; }
#include "Negate.h"
DMI::BObj * __construct_MeqNegate (int n) { return n>0 ? new Meq::Negate [n] : new Meq::Negate; }
#include "Invert.h"
DMI::BObj * __construct_MeqInvert (int n) { return n>0 ? new Meq::Invert [n] : new Meq::Invert; }
    using namespace DMI;
  
    int aidRegistry_MeqNodes ()
    {
      static int res = 

        AtomicID::registerId(-1438,"MeqConstant")+
        TypeInfoReg::addToRegistry(-1438,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1438,__construct_MeqConstant)+
        AtomicID::registerId(-1454,"MeqParm")+
        TypeInfoReg::addToRegistry(-1454,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1454,__construct_MeqParm)+
        AtomicID::registerId(-1420,"MeqFreq")+
        TypeInfoReg::addToRegistry(-1420,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1420,__construct_MeqFreq)+
        AtomicID::registerId(-1451,"MeqTime")+
        TypeInfoReg::addToRegistry(-1451,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1451,__construct_MeqTime)+
        AtomicID::registerId(-1447,"MeqSelector")+
        TypeInfoReg::addToRegistry(-1447,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1447,__construct_MeqSelector)+
        AtomicID::registerId(-1442,"MeqComposer")+
        TypeInfoReg::addToRegistry(-1442,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1442,__construct_MeqComposer)+
        AtomicID::registerId(-1418,"MeqAdd")+
        TypeInfoReg::addToRegistry(-1418,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1418,__construct_MeqAdd)+
        AtomicID::registerId(-1461,"MeqSubtract")+
        TypeInfoReg::addToRegistry(-1461,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1461,__construct_MeqSubtract)+
        AtomicID::registerId(-1391,"MeqMultiply")+
        TypeInfoReg::addToRegistry(-1391,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1391,__construct_MeqMultiply)+
        AtomicID::registerId(-1385,"MeqDivide")+
        TypeInfoReg::addToRegistry(-1385,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1385,__construct_MeqDivide)+
        AtomicID::registerId(-1430,"MeqSin")+
        TypeInfoReg::addToRegistry(-1430,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1430,__construct_MeqSin)+
        AtomicID::registerId(-1398,"MeqCos")+
        TypeInfoReg::addToRegistry(-1398,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1398,__construct_MeqCos)+
        AtomicID::registerId(-1393,"MeqExp")+
        TypeInfoReg::addToRegistry(-1393,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1393,__construct_MeqExp)+
        AtomicID::registerId(-1386,"MeqPow")+
        TypeInfoReg::addToRegistry(-1386,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1386,__construct_MeqPow)+
        AtomicID::registerId(-1458,"MeqSqr")+
        TypeInfoReg::addToRegistry(-1458,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1458,__construct_MeqSqr)+
        AtomicID::registerId(-1399,"MeqAsin")+
        TypeInfoReg::addToRegistry(-1399,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1399,__construct_MeqAsin)+
        AtomicID::registerId(-1411,"MeqAcos")+
        TypeInfoReg::addToRegistry(-1411,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1411,__construct_MeqAcos)+
        AtomicID::registerId(-1408,"MeqSqrt")+
        TypeInfoReg::addToRegistry(-1408,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1408,__construct_MeqSqrt)+
        AtomicID::registerId(-1394,"MeqConj")+
        TypeInfoReg::addToRegistry(-1394,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1394,__construct_MeqConj)+
        AtomicID::registerId(-1413,"MeqToComplex")+
        TypeInfoReg::addToRegistry(-1413,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1413,__construct_MeqToComplex)+
        AtomicID::registerId(-1383,"MeqPolar")+
        TypeInfoReg::addToRegistry(-1383,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1383,__construct_MeqPolar)+
        AtomicID::registerId(-1421,"MeqUVW")+
        TypeInfoReg::addToRegistry(-1421,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1421,__construct_MeqUVW)+
        AtomicID::registerId(-1435,"RA")+
        AtomicID::registerId(-1446,"Dec")+
        AtomicID::registerId(-1024,"X")+
        AtomicID::registerId(-1005,"Y")+
        AtomicID::registerId(-1021,"Z")+
        AtomicID::registerId(-1410,"MeqLMN")+
        TypeInfoReg::addToRegistry(-1410,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1410,__construct_MeqLMN)+
        AtomicID::registerId(-1397,"MeqLog")+
        TypeInfoReg::addToRegistry(-1397,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1397,__construct_MeqLog)+
        AtomicID::registerId(-1415,"MeqCosh")+
        TypeInfoReg::addToRegistry(-1415,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1415,__construct_MeqCosh)+
        AtomicID::registerId(-1407,"MeqSinh")+
        TypeInfoReg::addToRegistry(-1407,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1407,__construct_MeqSinh)+
        AtomicID::registerId(-1417,"MeqTan")+
        TypeInfoReg::addToRegistry(-1417,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1417,__construct_MeqTan)+
        AtomicID::registerId(-1450,"MeqTanh")+
        TypeInfoReg::addToRegistry(-1450,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1450,__construct_MeqTanh)+
        AtomicID::registerId(-1396,"MeqStatPointSourceDFT")+
        TypeInfoReg::addToRegistry(-1396,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1396,__construct_MeqStatPointSourceDFT)+
        AtomicID::registerId(-1402,"LMN")+
        AtomicID::registerId(-1123,"UVW")+
        AtomicID::registerId(-1405,"MeqPointSourceDFT")+
        TypeInfoReg::addToRegistry(-1405,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1405,__construct_MeqPointSourceDFT)+
        AtomicID::registerId(-1419,"St")+
        AtomicID::registerId(-1423,"DFT")+
        AtomicID::registerId(-1028,"N")+
        AtomicID::registerId(-1443,"MeqCondeq")+
        TypeInfoReg::addToRegistry(-1443,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1443,__construct_MeqCondeq)+
        AtomicID::registerId(-1401,"MeqSolver")+
        TypeInfoReg::addToRegistry(-1401,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1401,__construct_MeqSolver)+
        AtomicID::registerId(-1437,"MeqCeil")+
        TypeInfoReg::addToRegistry(-1437,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1437,__construct_MeqCeil)+
        AtomicID::registerId(-1436,"MeqFloor")+
        TypeInfoReg::addToRegistry(-1436,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1436,__construct_MeqFloor)+
        AtomicID::registerId(-1428,"MeqAtan")+
        TypeInfoReg::addToRegistry(-1428,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1428,__construct_MeqAtan)+
        AtomicID::registerId(-1439,"MeqPow2")+
        TypeInfoReg::addToRegistry(-1439,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1439,__construct_MeqPow2)+
        AtomicID::registerId(-1412,"MeqPow3")+
        TypeInfoReg::addToRegistry(-1412,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1412,__construct_MeqPow3)+
        AtomicID::registerId(-1403,"MeqPow4")+
        TypeInfoReg::addToRegistry(-1403,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1403,__construct_MeqPow4)+
        AtomicID::registerId(-1422,"MeqPow5")+
        TypeInfoReg::addToRegistry(-1422,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1422,__construct_MeqPow5)+
        AtomicID::registerId(-1445,"MeqPow6")+
        TypeInfoReg::addToRegistry(-1445,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1445,__construct_MeqPow6)+
        AtomicID::registerId(-1387,"MeqPow7")+
        TypeInfoReg::addToRegistry(-1387,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1387,__construct_MeqPow7)+
        AtomicID::registerId(-1395,"MeqPow8")+
        TypeInfoReg::addToRegistry(-1395,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1395,__construct_MeqPow8)+
        AtomicID::registerId(-1460,"MeqAbs")+
        TypeInfoReg::addToRegistry(-1460,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1460,__construct_MeqAbs)+
        AtomicID::registerId(-1429,"MeqFabs")+
        TypeInfoReg::addToRegistry(-1429,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1429,__construct_MeqFabs)+
        AtomicID::registerId(-1459,"MeqNorm")+
        TypeInfoReg::addToRegistry(-1459,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1459,__construct_MeqNorm)+
        AtomicID::registerId(-1457,"MeqArg")+
        TypeInfoReg::addToRegistry(-1457,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1457,__construct_MeqArg)+
        AtomicID::registerId(-1404,"MeqReal")+
        TypeInfoReg::addToRegistry(-1404,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1404,__construct_MeqReal)+
        AtomicID::registerId(-1427,"MeqImag")+
        TypeInfoReg::addToRegistry(-1427,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1427,__construct_MeqImag)+
        AtomicID::registerId(-1441,"MeqMergeFlags")+
        TypeInfoReg::addToRegistry(-1441,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1441,__construct_MeqMergeFlags)+
        AtomicID::registerId(-1134,"Flag")+
        AtomicID::registerId(-1263,"Mask")+
        AtomicID::registerId(-1425,"MeqReqSeq")+
        TypeInfoReg::addToRegistry(-1425,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1425,__construct_MeqReqSeq)+
        AtomicID::registerId(-1291,"Cells")+
        AtomicID::registerId(-1390,"Only")+
        AtomicID::registerId(-1392,"MeqMin")+
        TypeInfoReg::addToRegistry(-1392,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1392,__construct_MeqMin)+
        AtomicID::registerId(-1452,"MeqMax")+
        TypeInfoReg::addToRegistry(-1452,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1452,__construct_MeqMax)+
        AtomicID::registerId(-1416,"MeqMean")+
        TypeInfoReg::addToRegistry(-1416,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1416,__construct_MeqMean)+
        AtomicID::registerId(-1499,"MeqSum")+
        TypeInfoReg::addToRegistry(-1499,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1499,__construct_MeqSum)+
        AtomicID::registerId(-1501,"MeqProduct")+
        TypeInfoReg::addToRegistry(-1501,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1501,__construct_MeqProduct)+
        AtomicID::registerId(-1500,"MeqNElements")+
        TypeInfoReg::addToRegistry(-1500,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1500,__construct_MeqNElements)+
        AtomicID::registerId(-1409,"MeqStripper")+
        TypeInfoReg::addToRegistry(-1409,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1409,__construct_MeqStripper)+
        AtomicID::registerId(-1388,"MeqDataCollect")+
        TypeInfoReg::addToRegistry(-1388,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1388,__construct_MeqDataCollect)+
        AtomicID::registerId(-1400,"Top")+
        AtomicID::registerId(-1456,"Label")+
        AtomicID::registerId(-1382,"Attrib")+
        AtomicID::registerId(-1432,"Plot")+
        AtomicID::registerId(-1103,"Data")+
        AtomicID::registerId(-1426,"Color")+
        AtomicID::registerId(-1406,"Style")+
        AtomicID::registerId(-1255,"Size")+
        AtomicID::registerId(-1433,"Profile")+
        AtomicID::registerId(-1440,"Visu")+
        AtomicID::registerId(-1115,"XX")+
        AtomicID::registerId(-1170,"XY")+
        AtomicID::registerId(-1175,"YX")+
        AtomicID::registerId(-1118,"YY")+
        AtomicID::registerId(-1448,"MeqDataConcat")+
        TypeInfoReg::addToRegistry(-1448,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1448,__construct_MeqDataConcat)+
        AtomicID::registerId(-1389,"Skeleton")+
        AtomicID::registerId(-1384,"MeqRandomNoise")+
        TypeInfoReg::addToRegistry(-1384,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1384,__construct_MeqRandomNoise)+
        AtomicID::registerId(-1449,"MeqGaussNoise")+
        TypeInfoReg::addToRegistry(-1449,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1449,__construct_MeqGaussNoise)+
        AtomicID::registerId(-1350,"StdDev")+
        AtomicID::registerId(-1434,"MeqZeroFlagger")+
        TypeInfoReg::addToRegistry(-1434,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1434,__construct_MeqZeroFlagger)+
        AtomicID::registerId(-1453,"Oper")+
        AtomicID::registerId(-1293,"Bit")+
        AtomicID::registerId(-1444,"EQ")+
        AtomicID::registerId(-1381,"NE")+
        AtomicID::registerId(-1455,"LT")+
        AtomicID::registerId(-1431,"GT")+
        AtomicID::registerId(-1414,"LE")+
        AtomicID::registerId(-1424,"GE")+
        AtomicID::registerId(-1498,"Force")+
        AtomicID::registerId(-1241,"Output")+
        AtomicID::registerId(-1491,"MeqStdDev")+
        TypeInfoReg::addToRegistry(-1491,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1491,__construct_MeqStdDev)+
        AtomicID::registerId(-1502,"MeqWSum")+
        TypeInfoReg::addToRegistry(-1502,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1502,__construct_MeqWSum)+
        AtomicID::registerId(-1285,"Weights")+
        AtomicID::registerId(-1504,"MeqWMean")+
        TypeInfoReg::addToRegistry(-1504,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1504,__construct_MeqWMean)+
        AtomicID::registerId(-1506,"MeqNegate")+
        TypeInfoReg::addToRegistry(-1506,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1506,__construct_MeqNegate)+
        AtomicID::registerId(-1507,"MeqInvert")+
        TypeInfoReg::addToRegistry(-1507,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1507,__construct_MeqInvert)+
    0;
    return res;
  }
  
  int __dum_call_registries_for_MeqNodes = aidRegistry_MeqNodes();

