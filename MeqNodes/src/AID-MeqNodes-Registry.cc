    // This file is generated automatically -- do not edit
    // Generated by /home/oms/LOFAR/autoconf_share/../Timba/DMI/aid/build_aid_maps.pl
    #include <DMI/AtomicID.h>
    #include <DMI/TypeInfo.h>
    #include <DMI/DynamicTypeManager.h>
    #include <DMI/Packer.h>
#include "Constant.h"
DMI::BObj * __construct_MeqConstant (int n) { return n>0 ? new Meq::Constant [n] : new Meq::Constant; }
#include "Parm.h"
DMI::BObj * __construct_MeqParm (int n) { return n>0 ? new Meq::Parm [n] : new Meq::Parm; }
#include "Freq.h"
DMI::BObj * __construct_MeqFreq (int n) { return n>0 ? new Meq::Freq [n] : new Meq::Freq; }
#include "Time.h"
DMI::BObj * __construct_MeqTime (int n) { return n>0 ? new Meq::Time [n] : new Meq::Time; }
#include "Selector.h"
DMI::BObj * __construct_MeqSelector (int n) { return n>0 ? new Meq::Selector [n] : new Meq::Selector; }
#include "Composer.h"
DMI::BObj * __construct_MeqComposer (int n) { return n>0 ? new Meq::Composer [n] : new Meq::Composer; }
#include "Add.h"
DMI::BObj * __construct_MeqAdd (int n) { return n>0 ? new Meq::Add [n] : new Meq::Add; }
#include "Subtract.h"
DMI::BObj * __construct_MeqSubtract (int n) { return n>0 ? new Meq::Subtract [n] : new Meq::Subtract; }
#include "Multiply.h"
DMI::BObj * __construct_MeqMultiply (int n) { return n>0 ? new Meq::Multiply [n] : new Meq::Multiply; }
#include "Divide.h"
DMI::BObj * __construct_MeqDivide (int n) { return n>0 ? new Meq::Divide [n] : new Meq::Divide; }
#include "Sin.h"
DMI::BObj * __construct_MeqSin (int n) { return n>0 ? new Meq::Sin [n] : new Meq::Sin; }
#include "Cos.h"
DMI::BObj * __construct_MeqCos (int n) { return n>0 ? new Meq::Cos [n] : new Meq::Cos; }
#include "Exp.h"
DMI::BObj * __construct_MeqExp (int n) { return n>0 ? new Meq::Exp [n] : new Meq::Exp; }
#include "Pow.h"
DMI::BObj * __construct_MeqPow (int n) { return n>0 ? new Meq::Pow [n] : new Meq::Pow; }
#include "Sqr.h"
DMI::BObj * __construct_MeqSqr (int n) { return n>0 ? new Meq::Sqr [n] : new Meq::Sqr; }
#include "Asin.h"
DMI::BObj * __construct_MeqAsin (int n) { return n>0 ? new Meq::Asin [n] : new Meq::Asin; }
#include "Acos.h"
DMI::BObj * __construct_MeqAcos (int n) { return n>0 ? new Meq::Acos [n] : new Meq::Acos; }
#include "Sqrt.h"
DMI::BObj * __construct_MeqSqrt (int n) { return n>0 ? new Meq::Sqrt [n] : new Meq::Sqrt; }
#include "Conj.h"
DMI::BObj * __construct_MeqConj (int n) { return n>0 ? new Meq::Conj [n] : new Meq::Conj; }
#include "ToComplex.h"
DMI::BObj * __construct_MeqToComplex (int n) { return n>0 ? new Meq::ToComplex [n] : new Meq::ToComplex; }
#include "Polar.h"
DMI::BObj * __construct_MeqPolar (int n) { return n>0 ? new Meq::Polar [n] : new Meq::Polar; }
#include "UVW.h"
DMI::BObj * __construct_MeqUVW (int n) { return n>0 ? new Meq::UVW [n] : new Meq::UVW; }
#include "LMN.h"
DMI::BObj * __construct_MeqLMN (int n) { return n>0 ? new Meq::LMN [n] : new Meq::LMN; }
#include "Log.h"
DMI::BObj * __construct_MeqLog (int n) { return n>0 ? new Meq::Log [n] : new Meq::Log; }
#include "Cosh.h"
DMI::BObj * __construct_MeqCosh (int n) { return n>0 ? new Meq::Cosh [n] : new Meq::Cosh; }
#include "Sinh.h"
DMI::BObj * __construct_MeqSinh (int n) { return n>0 ? new Meq::Sinh [n] : new Meq::Sinh; }
#include "Tan.h"
DMI::BObj * __construct_MeqTan (int n) { return n>0 ? new Meq::Tan [n] : new Meq::Tan; }
#include "Tanh.h"
DMI::BObj * __construct_MeqTanh (int n) { return n>0 ? new Meq::Tanh [n] : new Meq::Tanh; }
#include "StatPointSourceDFT.h"
DMI::BObj * __construct_MeqStatPointSourceDFT (int n) { return n>0 ? new Meq::StatPointSourceDFT [n] : new Meq::StatPointSourceDFT; }
#include "PointSourceDFT.h"
DMI::BObj * __construct_MeqPointSourceDFT (int n) { return n>0 ? new Meq::PointSourceDFT [n] : new Meq::PointSourceDFT; }
#include "Condeq.h"
DMI::BObj * __construct_MeqCondeq (int n) { return n>0 ? new Meq::Condeq [n] : new Meq::Condeq; }
#include "Solver.h"
DMI::BObj * __construct_MeqSolver (int n) { return n>0 ? new Meq::Solver [n] : new Meq::Solver; }
#include "Ceil.h"
DMI::BObj * __construct_MeqCeil (int n) { return n>0 ? new Meq::Ceil [n] : new Meq::Ceil; }
#include "Floor.h"
DMI::BObj * __construct_MeqFloor (int n) { return n>0 ? new Meq::Floor [n] : new Meq::Floor; }
#include "Atan.h"
DMI::BObj * __construct_MeqAtan (int n) { return n>0 ? new Meq::Atan [n] : new Meq::Atan; }
#include "Pow2.h"
DMI::BObj * __construct_MeqPow2 (int n) { return n>0 ? new Meq::Pow2 [n] : new Meq::Pow2; }
#include "Pow3.h"
DMI::BObj * __construct_MeqPow3 (int n) { return n>0 ? new Meq::Pow3 [n] : new Meq::Pow3; }
#include "Pow4.h"
DMI::BObj * __construct_MeqPow4 (int n) { return n>0 ? new Meq::Pow4 [n] : new Meq::Pow4; }
#include "Pow5.h"
DMI::BObj * __construct_MeqPow5 (int n) { return n>0 ? new Meq::Pow5 [n] : new Meq::Pow5; }
#include "Pow6.h"
DMI::BObj * __construct_MeqPow6 (int n) { return n>0 ? new Meq::Pow6 [n] : new Meq::Pow6; }
#include "Pow7.h"
DMI::BObj * __construct_MeqPow7 (int n) { return n>0 ? new Meq::Pow7 [n] : new Meq::Pow7; }
#include "Pow8.h"
DMI::BObj * __construct_MeqPow8 (int n) { return n>0 ? new Meq::Pow8 [n] : new Meq::Pow8; }
#include "Abs.h"
DMI::BObj * __construct_MeqAbs (int n) { return n>0 ? new Meq::Abs [n] : new Meq::Abs; }
#include "Fabs.h"
DMI::BObj * __construct_MeqFabs (int n) { return n>0 ? new Meq::Fabs [n] : new Meq::Fabs; }
#include "Norm.h"
DMI::BObj * __construct_MeqNorm (int n) { return n>0 ? new Meq::Norm [n] : new Meq::Norm; }
#include "Arg.h"
DMI::BObj * __construct_MeqArg (int n) { return n>0 ? new Meq::Arg [n] : new Meq::Arg; }
#include "Real.h"
DMI::BObj * __construct_MeqReal (int n) { return n>0 ? new Meq::Real [n] : new Meq::Real; }
#include "Imag.h"
DMI::BObj * __construct_MeqImag (int n) { return n>0 ? new Meq::Imag [n] : new Meq::Imag; }
#include "MergeFlags.h"
DMI::BObj * __construct_MeqMergeFlags (int n) { return n>0 ? new Meq::MergeFlags [n] : new Meq::MergeFlags; }
#include "ReqSeq.h"
DMI::BObj * __construct_MeqReqSeq (int n) { return n>0 ? new Meq::ReqSeq [n] : new Meq::ReqSeq; }
#include "Min.h"
DMI::BObj * __construct_MeqMin (int n) { return n>0 ? new Meq::Min [n] : new Meq::Min; }
#include "Max.h"
DMI::BObj * __construct_MeqMax (int n) { return n>0 ? new Meq::Max [n] : new Meq::Max; }
#include "Mean.h"
DMI::BObj * __construct_MeqMean (int n) { return n>0 ? new Meq::Mean [n] : new Meq::Mean; }
#include "Stripper.h"
DMI::BObj * __construct_MeqStripper (int n) { return n>0 ? new Meq::Stripper [n] : new Meq::Stripper; }
#include "DataCollect.h"
DMI::BObj * __construct_MeqDataCollect (int n) { return n>0 ? new Meq::DataCollect [n] : new Meq::DataCollect; }
#include "DataConcat.h"
DMI::BObj * __construct_MeqDataConcat (int n) { return n>0 ? new Meq::DataConcat [n] : new Meq::DataConcat; }
#include "RandomNoise.h"
DMI::BObj * __construct_MeqRandomNoise (int n) { return n>0 ? new Meq::RandomNoise [n] : new Meq::RandomNoise; }
#include "GaussNoise.h"
DMI::BObj * __construct_MeqGaussNoise (int n) { return n>0 ? new Meq::GaussNoise [n] : new Meq::GaussNoise; }
    using namespace DMI;
  
    int aidRegistry_MeqNodes ()
    {
      static int res = 

        AtomicID::registerId(-1216,"meqconstant")+
        TypeInfoReg::addToRegistry(-1216,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1216,__construct_MeqConstant)+
        AtomicID::registerId(-1231,"meqparm")+
        TypeInfoReg::addToRegistry(-1231,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1231,__construct_MeqParm)+
        AtomicID::registerId(-1192,"meqfreq")+
        TypeInfoReg::addToRegistry(-1192,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1192,__construct_MeqFreq)+
        AtomicID::registerId(-1202,"meqtime")+
        TypeInfoReg::addToRegistry(-1202,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1202,__construct_MeqTime)+
        AtomicID::registerId(-1247,"meqselector")+
        TypeInfoReg::addToRegistry(-1247,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1247,__construct_MeqSelector)+
        AtomicID::registerId(-1230,"meqcomposer")+
        TypeInfoReg::addToRegistry(-1230,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1230,__construct_MeqComposer)+
        AtomicID::registerId(-1215,"meqadd")+
        TypeInfoReg::addToRegistry(-1215,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1215,__construct_MeqAdd)+
        AtomicID::registerId(-1213,"meqsubtract")+
        TypeInfoReg::addToRegistry(-1213,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1213,__construct_MeqSubtract)+
        AtomicID::registerId(-1211,"meqmultiply")+
        TypeInfoReg::addToRegistry(-1211,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1211,__construct_MeqMultiply)+
        AtomicID::registerId(-1198,"meqdivide")+
        TypeInfoReg::addToRegistry(-1198,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1198,__construct_MeqDivide)+
        AtomicID::registerId(-1199,"meqsin")+
        TypeInfoReg::addToRegistry(-1199,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1199,__construct_MeqSin)+
        AtomicID::registerId(-1232,"meqcos")+
        TypeInfoReg::addToRegistry(-1232,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1232,__construct_MeqCos)+
        AtomicID::registerId(-1229,"meqexp")+
        TypeInfoReg::addToRegistry(-1229,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1229,__construct_MeqExp)+
        AtomicID::registerId(-1184,"meqpow")+
        TypeInfoReg::addToRegistry(-1184,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1184,__construct_MeqPow)+
        AtomicID::registerId(-1240,"meqsqr")+
        TypeInfoReg::addToRegistry(-1240,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1240,__construct_MeqSqr)+
        AtomicID::registerId(-1236,"meqasin")+
        TypeInfoReg::addToRegistry(-1236,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1236,__construct_MeqAsin)+
        AtomicID::registerId(-1178,"meqacos")+
        TypeInfoReg::addToRegistry(-1178,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1178,__construct_MeqAcos)+
        AtomicID::registerId(-1245,"meqsqrt")+
        TypeInfoReg::addToRegistry(-1245,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1245,__construct_MeqSqrt)+
        AtomicID::registerId(-1179,"meqconj")+
        TypeInfoReg::addToRegistry(-1179,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1179,__construct_MeqConj)+
        AtomicID::registerId(-1188,"meqtocomplex")+
        TypeInfoReg::addToRegistry(-1188,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1188,__construct_MeqToComplex)+
        AtomicID::registerId(-1242,"meqpolar")+
        TypeInfoReg::addToRegistry(-1242,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1242,__construct_MeqPolar)+
        AtomicID::registerId(-1226,"mequvw")+
        TypeInfoReg::addToRegistry(-1226,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1226,__construct_MeqUVW)+
        AtomicID::registerId(-1238,"ra")+
        AtomicID::registerId(-1195,"dec")+
        AtomicID::registerId(-1032,"x")+
        AtomicID::registerId(-1033,"y")+
        AtomicID::registerId(-1034,"z")+
        AtomicID::registerId(-1190,"meqlmn")+
        TypeInfoReg::addToRegistry(-1190,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1190,__construct_MeqLMN)+
        AtomicID::registerId(-1201,"meqlog")+
        TypeInfoReg::addToRegistry(-1201,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1201,__construct_MeqLog)+
        AtomicID::registerId(-1210,"meqcosh")+
        TypeInfoReg::addToRegistry(-1210,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1210,__construct_MeqCosh)+
        AtomicID::registerId(-1175,"meqsinh")+
        TypeInfoReg::addToRegistry(-1175,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1175,__construct_MeqSinh)+
        AtomicID::registerId(-1249,"meqtan")+
        TypeInfoReg::addToRegistry(-1249,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1249,__construct_MeqTan)+
        AtomicID::registerId(-1244,"meqtanh")+
        TypeInfoReg::addToRegistry(-1244,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1244,__construct_MeqTanh)+
        AtomicID::registerId(-1237,"meqstatpointsourcedft")+
        TypeInfoReg::addToRegistry(-1237,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1237,__construct_MeqStatPointSourceDFT)+
        AtomicID::registerId(-1204,"lmn")+
        AtomicID::registerId(-1234,"uvw")+
        AtomicID::registerId(-1200,"meqpointsourcedft")+
        TypeInfoReg::addToRegistry(-1200,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1200,__construct_MeqPointSourceDFT)+
        AtomicID::registerId(-1246,"st")+
        AtomicID::registerId(-1203,"dft")+
        AtomicID::registerId(-1021,"n")+
        AtomicID::registerId(-1191,"meqcondeq")+
        TypeInfoReg::addToRegistry(-1191,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1191,__construct_MeqCondeq)+
        AtomicID::registerId(-1183,"meqsolver")+
        TypeInfoReg::addToRegistry(-1183,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1183,__construct_MeqSolver)+
        AtomicID::registerId(-1239,"meqceil")+
        TypeInfoReg::addToRegistry(-1239,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1239,__construct_MeqCeil)+
        AtomicID::registerId(-1243,"meqfloor")+
        TypeInfoReg::addToRegistry(-1243,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1243,__construct_MeqFloor)+
        AtomicID::registerId(-1212,"meqatan")+
        TypeInfoReg::addToRegistry(-1212,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1212,__construct_MeqAtan)+
        AtomicID::registerId(-1218,"meqpow2")+
        TypeInfoReg::addToRegistry(-1218,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1218,__construct_MeqPow2)+
        AtomicID::registerId(-1219,"meqpow3")+
        TypeInfoReg::addToRegistry(-1219,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1219,__construct_MeqPow3)+
        AtomicID::registerId(-1220,"meqpow4")+
        TypeInfoReg::addToRegistry(-1220,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1220,__construct_MeqPow4)+
        AtomicID::registerId(-1221,"meqpow5")+
        TypeInfoReg::addToRegistry(-1221,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1221,__construct_MeqPow5)+
        AtomicID::registerId(-1222,"meqpow6")+
        TypeInfoReg::addToRegistry(-1222,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1222,__construct_MeqPow6)+
        AtomicID::registerId(-1223,"meqpow7")+
        TypeInfoReg::addToRegistry(-1223,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1223,__construct_MeqPow7)+
        AtomicID::registerId(-1224,"meqpow8")+
        TypeInfoReg::addToRegistry(-1224,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1224,__construct_MeqPow8)+
        AtomicID::registerId(-1206,"meqabs")+
        TypeInfoReg::addToRegistry(-1206,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1206,__construct_MeqAbs)+
        AtomicID::registerId(-1235,"meqfabs")+
        TypeInfoReg::addToRegistry(-1235,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1235,__construct_MeqFabs)+
        AtomicID::registerId(-1225,"meqnorm")+
        TypeInfoReg::addToRegistry(-1225,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1225,__construct_MeqNorm)+
        AtomicID::registerId(-1209,"meqarg")+
        TypeInfoReg::addToRegistry(-1209,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1209,__construct_MeqArg)+
        AtomicID::registerId(-1174,"meqreal")+
        TypeInfoReg::addToRegistry(-1174,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1174,__construct_MeqReal)+
        AtomicID::registerId(-1182,"meqimag")+
        TypeInfoReg::addToRegistry(-1182,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1182,__construct_MeqImag)+
        AtomicID::registerId(-1214,"meqmergeflags")+
        TypeInfoReg::addToRegistry(-1214,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1214,__construct_MeqMergeFlags)+
        AtomicID::registerId(-1060,"flag")+
        AtomicID::registerId(-1130,"mask")+
        AtomicID::registerId(-1186,"meqreqseq")+
        TypeInfoReg::addToRegistry(-1186,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1186,__construct_MeqReqSeq)+
        AtomicID::registerId(-1119,"cells")+
        AtomicID::registerId(-1187,"only")+
        AtomicID::registerId(-1185,"meqmin")+
        TypeInfoReg::addToRegistry(-1185,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1185,__construct_MeqMin)+
        AtomicID::registerId(-1233,"meqmax")+
        TypeInfoReg::addToRegistry(-1233,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1233,__construct_MeqMax)+
        AtomicID::registerId(-1181,"meqmean")+
        TypeInfoReg::addToRegistry(-1181,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1181,__construct_MeqMean)+
        AtomicID::registerId(-1227,"meqstripper")+
        TypeInfoReg::addToRegistry(-1227,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1227,__construct_MeqStripper)+
        AtomicID::registerId(-1217,"meqdatacollect")+
        TypeInfoReg::addToRegistry(-1217,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1217,__construct_MeqDataCollect)+
        AtomicID::registerId(-1176,"top")+
        AtomicID::registerId(-1228,"label")+
        AtomicID::registerId(-1205,"attrib")+
        AtomicID::registerId(-1208,"plot")+
        AtomicID::registerId(-1248,"data")+
        AtomicID::registerId(-1241,"color")+
        AtomicID::registerId(-1189,"style")+
        AtomicID::registerId(-1072,"size")+
        AtomicID::registerId(-1250,"profile")+
        AtomicID::registerId(-1207,"visu")+
        AtomicID::registerId(-1193,"xx")+
        AtomicID::registerId(-1194,"xy")+
        AtomicID::registerId(-1196,"yx")+
        AtomicID::registerId(-1197,"yy")+
        AtomicID::registerId(-1177,"meqdataconcat")+
        TypeInfoReg::addToRegistry(-1177,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1177,__construct_MeqDataConcat)+
        AtomicID::registerId(-1180,"skeleton")+
        AtomicID::registerId(-1482,"meqrandomnoise")+
        TypeInfoReg::addToRegistry(-1482,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1482,__construct_MeqRandomNoise)+
        AtomicID::registerId(-1481,"meqgaussnoise")+
        TypeInfoReg::addToRegistry(-1481,TypeInfo(TypeInfo::DYNAMIC,0))+
        DynamicTypeManager::addToRegistry(-1481,__construct_MeqGaussNoise)+
    0;
    return res;
  }
  
  int __dum_call_registries_for_MeqNodes = aidRegistry_MeqNodes();

