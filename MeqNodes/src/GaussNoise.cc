//# GaussNoise.cc: Give Gauss noise
//#
//# Copyright (C) 2003
//# ASTRON (Netherlands Foundation for Research in Astronomy)
//# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
//#
//# This program is free software; you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation; either version 2 of the License, or
//# (at your option) any later version.
//#
//# This program is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with this program; if not, write to the Free Software
//# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//#
//# $Id$

#include <stdlib.h>

#include <MeqNodes/GaussNoise.h>
#include <MEQ/Request.h>
#include <MEQ/VellSet.h>
#include <MEQ/Cells.h>

namespace Meq {    

const HIID FDomain = AidDomain;

//##ModelId=400E535502AC
GaussNoise::GaussNoise()
{ 
  const HIID symdeps[] = { FDomain,FResolution };
  setActiveSymDeps(symdeps,2);
}

//##ModelId=400E535502AD
GaussNoise::~GaussNoise()
{}

//##ModelId=400E535502AF
//void GaussNoise::init (DMI::Record::Ref::Xfer &initrec, Forest* frst)
//{
//  Node::init(initrec,frst);
  // FailWhen(numChildren(),"GaussNoise node cannot have children");
//}

//##ModelId=400E535502B5
int GaussNoise::getResult (Result::Ref &resref, 
                     const std::vector<Result::Ref> &childres,
                     const Request &request,bool newreq)
{
  //
  // Get values from child 1 and 2.
  // - Child 1 is supposed to have the standard deviation
  //           If Child1 is not present, the default value is 1
  //
  double StdVal = 1.0;

  // - Child 2 is supposed to have the requested average value for the
  //           the random numbers.
  //           If Child2 is not present, the default value is 0
  //
  double MeanVal = 0.0;

  if (numChildren() > 0){
    const Vells& vra  = childres[0]->vellSet(0).getValue();
    StdVal = vra.as<double>();
  }
  if (numChildren() == 2){
    const Vells& vrb  = childres[1]->vellSet(0).getValue();
    MeanVal = vrb.as<double>();
  }

  //
  // Create the cells.
  //
  const Cells& cells = request.cells();
  //
  // Create result object and attach to the ref that was passed in.
  //
  resref <<= new Result(1);                 // 1 plane
  VellSet& vs = resref().setNewVellSet(0);  // create new object for plane 0

  //
  if( cells.isDefined(Axis::TIME) && cells.isDefined(Axis::FREQ))
  {
    Vells::Shape shape;
    Axis::degenerateShape(shape,cells.rank());

    //
    // nt = shape of TIME axis
    // nf = shape of FREQ axis
    //
    int nt = shape[Axis::TIME] = cells.ncells(Axis::TIME);
    int nf = shape[Axis::FREQ] = cells.ncells(Axis::FREQ);
    Vells & vells = vs.setValue(new Vells(0,shape,false));

    double Scale = RAND_MAX;    // max. number that comes from the random generator

    //
    // Since the values will be copied into the vells with a memcopy,
    // it not necessary to work on a 2D array
    //
    int imax = nt*nf;
    double tmp[imax];

    //
    // Gaussian noise can be generated by adding 10 random numbers.
    //
    for (int i = 0; i < imax; i++){
      tmp[i] = random();
    }
    for (int k = 0; k < 9; k++){
      for (int i = 0; i < imax; i++){
	tmp[i] += random();
      }
    }

    //
    // Bring in range <0,1> and calculate mean value
    //
    double CurrMean = 0;
    for (int i = 0; i < imax; i++){
      tmp[i] /= RAND_MAX;
      tmp[i] /= 10.0;     // We added 10 random values
      CurrMean += tmp[i];
    }
    CurrMean = CurrMean / (imax);

    //
    // Determine RMS value
    //
    double StdSum = 0;
    for (int i = 0; i < imax; i++){
      double t = CurrMean-tmp[i];
      StdSum += t*t;
    }
    double Std = sqrt(StdSum/imax);

    //
    // Force mean value to value of child 2 and the Std to the value of child 1
    //
    double StdFactor = StdVal / Std;
    for (int i = 0; i < imax; i++){
      tmp[i] -= CurrMean;
      tmp[i] *= StdFactor;
      tmp[i] += MeanVal;
    }

    //    //
    //    // For testing - determine new stddev
    //    //
    //    CurrMean = 0;
    //    for (int i = 0; i < imax; i++){
    //      CurrMean += tmp[i];
    //    }
    //    CurrMean = CurrMean / (imax);
    //
    //    //
    //    // Determine RMS value
    //    //
    //    StdSum = 0;
    //    for (int i = 0; i < imax; i++){
    //      double t = CurrMean-tmp[i];
    //      StdSum += t*t;
    //    }
    //    Std = sqrt(StdSum/imax);
    //    tmp[0] = 0.0;
    //    tmp[1] = Std;
    //    tmp[2] = 0.0;


    //
    // Put in vells vactor
    //
    memcpy(vells.realStorage(), tmp, nt*nf*sizeof(double));

  } else
    vs.setValue(new Vells(0.));

  return 0;
}

} // namespace Meq
