# ../Timba/PyApps/test/MeqToy_unop.tdl:  
#   Toy .tdl script for learning about MeqTree operation
#   They contain ONLY standard MeqTree stuff  

# standard preamble
from Timba.TDL import *
from Timba.Meq import meq

from numarray import *


#================================================================================
# The forest state record will be included automatically in the tree.
# Just assign fields to: Settings.forest_state[key] = ...
#================================================================================

Settings.forest_state['cache_policy'] = 100


#================================================================================
# The main routine (to be edited and executed):
#================================================================================

def define_forest (ns):
  # p1 = ns.parm1 << Meq.Parm(0)
  arr = array([[1,.3,.1],[.1,.2,.3]])
  print arr
  p1 = ns.parm1 << Meq.Parm(arr)
  v = cos(arr[0,0])
  ns.root << Meq.Cos(p1, calculated=v)


#================================================================================
# Test routine:
#================================================================================


def test_forest (mqs, parent):
  """test_forest() is a standard TDL name. When a forest script is
  loaded by, e.g., the browser, and the "test" option is set to true,
  this method is automatically called after define_forest() to run a 
  test on the forest. The 'mqs' argument is a meqserver proxy object.
  """;
  from Timba.Meq import meq

  # run test on the forest
  cells = meq.cells(meq.domain(0,1,0,1),num_freq=6,num_time=4);
  request = meq.request(cells,eval_mode=0);
  mqs.meq('Node.Execute',record(name='root',request=request));
  mqs.meq('Save.Forest',record(file_name='MeqToy_unop.forest'));




#================================================================================
# Test routine:
#================================================================================
# this is a useful thing to have at the bottom of the script, 
# it allows us to check the tree for consistency
# simply by running 'python script.tdl'

if __name__ == '__main__':
  ns = NodeScope();
  define_forest(ns);
  # resolves nodes
  ns.Resolve();
  
  print len(ns.AllNodes()),'nodes defined';
