script_name = 'MG_JEN_template.py'

# Short description:
# Template for the generation of MeqGraft scripts

# Author: Jan Noordam (JEN), Dwingeloo

# History:
# - 22 aug 2005: creation

# Copyright: The MeqTree Foundation 


# Import Python modules:
from Timba.TDL import *
from Timba.Meq import meq

import MG_JEN_template 
import MG_JEN_forest_state

from numarray import *
# from string import *
# from copy import deepcopy



#================================================================================
# Required functions:
#================================================================================


#--------------------------------------------------------------------------------
# Tree definition routine (may be executed from the browser):
# To be used as example, for experimentation, and automatic testing.

def _define_forest (ns):

   # Generate a list (cc) of one or more root nodes:
   cc = []

   # Test/demo of importable function:
   p1 = 1
   p2 = 2
   cc.append(importable_example (ns, arg1=p1, arg2=p2))

   # Finished: 
   return on_exit (ns, cc)            
   # return MG_JEN_template.on_exit (ns, cc)



#--------------------------------------------------------------------------------
# The forest state record will be included automatically in the tree.
# Just assign fields to: Settings.forest_state[key] = ...

MG_JEN_forest_state.init(script_name)


#--------------------------------------------------------------------------------
# Tree execution routine (may be called from the browser):
# The 'mqs' argument is a meqserver proxy object.

def _test_forest (mqs, parent):
   return execute_forest (mqs, parent)
   # return MG_JEN_template.execute_forest (mqs, parent)


#--------------------------------------------------------------------------------
# Test routine to check the tree for consistency in the absence of a server

if __name__ == '__main__':
   execute_without_mqs()
   # MG_JEN_template.execute_without_mqs()









#================================================================================
# Importable function(s): The essence of a MeqGraft (MG) script.
# To be imported into user scripts. 
#================================================================================

#-------------------------------------------------------------------------------
# Example:

def importable_example(ns, **pp):
   node = ns.dummy << Meq.Parm(array([[1,-0.2],[0.3,0.1]]))
   return node



#-------------------------------------------------------------------------------
# Deal with the list (cc) of root nodes:
# NB: This function may be imported from MG_JEN_template.py by other functions
# NB: Remove this function when turning this template into a new MG script
   
def on_exit (ns, cc):
   # Make a (single) root node for use in _test_forest() below:
   global _test_root
   _test_root = '_test_root'
   if not isinstance(cc, list): cc = [cc]

   if len(cc) == 1:
      root = ns[_test_root] << Meq.Selector(cc[0])
      # Make some (pages of) bookmarks for easy viewing of the result:
      MG_JEN_forest_state.bookmark(root, page='test_root') 
      MG_JEN_forest_state.bookmark(root, page='test_root', viewer='Record Browser')

   else:
      # Make a single root node to tie the various results (cc) together:
      root = ns[_test_root] << Meq.Add(children=cc)
      # Make a bookpage for all elements of cc:
      for i in range(len(cc)):
         MG_JEN_forest_state.bookmark(cc[i], page='multi_test') 
      # Make a separate bookmark for the sum node:
      MG_JEN_forest_state.bookmark(root) 
   

   return root
   

#-------------------------------------------------------------------------------- 
# The function that does the work for _test_forest()
# NB: This function may be imported from MG_JEN_template.py by other functions
# NB: Remove this function when turning this template into a new MG script

def execute_forest (mqs, parent, nfreq=20, ntime=19):

   # Execute the forest with a 'suitable' request:
   cells = meq.cells(meq.domain(0,1,0,1), num_freq=nfreq, num_time=ntime);
   request = meq.request(cells,eval_mode=0);
   global _test_root                                         # see on_exit()
   mqs.meq('Node.Execute',record(name=_test_root, request=request));

   # Save the meqforest in a file:
   MG_JEN_forest_state.save(mqs)

   return


#-------------------------------------------------------------------------------- 
# NB: This function may be imported from MG_JEN_template.py by other functions
# NB: Remove this function when turning this template into a new MG script

def execute_without_mqs():
   ns = NodeScope();
   _define_forest(ns);
   ns.Resolve();
   return True

#********************************************************************************




