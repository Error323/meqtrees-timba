"""
The QuickRef module offers a quick reference to MeqTrees.
When used in the meqbrowser, it generates example subtrees
for user-selected categories, which can be executed (with
user-defined request domains) to inspect the result.

Lots of bookmarks are generated for easy inspection.
In addition, the relevant section of the hierarchical
help-string can be inspected at each level, by displaying
any node in the tree with the Record Browser. Look for
the field 'quickref_help'.

The entire hierarchical help (for the selected categories)
may be shown/printed/saved as well.

The QuickRef module gets its information from an arbitrary number
of contributing QR_... modules. Such modules may be generated by
any MeqTrees contributor, following a number of simple rules.
(Look for instance at the module QR_MeqNodes.py)
"""

# file: ../JEN/demo/QuickRef.py:
#
# Author: J.E.Noordam
#
# Short description:
#    A quick reference to all MeqTree nodes and subtrees.
#    It makes actual nodes, and prints help etc

#
# History:
#   - 23 may 2008: creation
#
# Remarks:
#
#   - AGW: Middle-clicking a node in the browser could display its quickref_help
#     (field in the state record) just like right-click option in the various plotter(s)....
#     The quickref_help is in the form of a record.
#     Tony already has a popup uption for selecting from multiple vellsets,
#     which includes an expansion tree. The quickref_help popup needs the same.
#   - AGW: Left-clicking a node displays the state record, except the Composer...
#         It would be nice if it were easier to invoke the relevant plotter...
#         (at this moment it takes to many actions, and the new display is confusing)
#   - OMS:Can we plot the result of each request in a sequence while it is running....?
#         (this problem may have been solved....)
#   - AGW: Flag-information is lost when a panel is floated in a separate window.
#          Also in the plot-memory... (Try unary_elementary sqrt(noise3))
#   - AGW: When the flags are "toggled" the colorbar scale does not change,
#          and neither do the mean/stddev in the top-right corner...
#
#   - OMS: TDLCompileMenu should have tick-box option (just like the TDLOption)
#     Or should I read the manual better?
#   - OMS: Meow.Bookmarks needs a folder option....
#   - Is there a way to attach fields like a quickref_help record to the
#     state record (initrec?) of an existing node?
#   - AGW: Right-click plotting in Log scale does not work if 1D data
#     (it only produces a colorbar...)
#     NB: it is only offered as an option when doing 1D after 2D...
#   - OMS: TDLOption separator (None): gives problems.... (rebuild?)
#          Same with TDLRuntimeOptionSeparator()
#          It complains that the option name has to be a string....
#
# Description:
#


 
#********************************************************************************
# Initialisation:
#********************************************************************************

#
#% $Id$ 
#
#
# Copyright (C) 2002-2007
# The MeqTree Foundation & 
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>,
# or write to the Free Software Foundation, Inc., 
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

from Timba.TDL import *
from Timba.Meq import meq

Settings.forest_state.cache_policy = 100
Settings.forest_state.bookmarks = []

import QuickRefUtil as QR


#********************************************************************************
#********************************************************************************

TDLCompileMenu("QuickRef Categories:",
               TDLOption('opt_general',"QR_MeqTree: general items",False),
               TDLOption('opt_MeqBrowser',"QR_MeqBrowser: browser features",False),
               TDLOption('opt_MeqNodes',"QR_MeqNodes: Available nodes",True),
               TDLOption('opt_pynodes',"QR_PyNodes: general pynodes",False),
               toggle='opt_QuickRef',
               )

if opt_MeqNodes:              
   import QR_MeqNodes        
   TDLCompileMenu("Options for QR_MeqNodes:", QR_MeqNodes)



#-------------------------------------------------------------------------------

def _define_forest (ns, **kwargs):

   # Make bundles of (bundles of) categories of nodes/subtrees:
   global rider
   rider = QR.create_rider()                # CollatedHelpRecord object
   rootnodename = 'QuickRef'                # The name of the node to be executed...
   path = rootnodename                      # Root of the path-string

   cc = []
   if opt_MeqNodes:   
      import QR_MeqNodes   
      TDLCompileMenu("Options for QR_MeqNodes", QR_MeqNodes)
      cc.append(QR_MeqNodes.MeqNodes(ns, path, rider=rider))

   # Make the outer bundle (of node bundles):
   QR.bundle (ns, path, nodes=cc, help=__doc__, rider=rider)

   # Finished:
   return True
   


#********************************************************************************
#********************************************************************************

def _tdl_job_execute_1D (mqs, parent):
   return QR._tdl_job_execute_1D (mqs, parent, rootnode='QuickRef')

def _tdl_job_execute_2D (mqs, parent):
   return QR._tdl_job_execute_2D (mqs, parent, rootnode='QuickRef')

def _tdl_job_execute_sequence (mqs, parent):
   return QR._tdl_job_execute_sequence (mqs, parent, rootnode='QuickRef')

def _tdl_job_m (mqs, parent):
   return QR._tdl_job_m (mqs, parent)

def _tdl_job_print_doc (mqs, parent):
   return QR._tdl_job_print_doc (mqs, parent, rider, header='QuickRef')

def _tdl_job_print_hardcopy (mqs, parent):
   return QR._tdl_job_print_hardcopy (mqs, parent, rider, header='QuickRef')

def _tdl_job_show_doc (mqs, parent):
   return QR._tdl_job_show_doc (mqs, parent, rider, header='QuickRef')

def _tdl_job_save_doc (mqs, parent):
   return QR._tdl_job_save_doc (mqs, parent, rider, filename='QuickRef')



#=====================================================================================
# Standalone test (without the browser):
#=====================================================================================

if __name__ == '__main__':

   print '\n** Start of standalone test of: QuickRef.py:\n' 
   ns = NodeScope()

   print '\n** End of standalone test of: QuickRef.py:\n' 

#=====================================================================================



