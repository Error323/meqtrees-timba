file: ../WH/contrib/JEN/shapelets.txt


======================================================================
===================== Shapelet decomposition =========================
======================================================================

This summary is just to help me think and communicate, a few thoughts
about shapelets as discussed with various people today (JEN, 03 aug
2006).  Updated on 05 and 07 and 11 aug.

(This could go on the WIKI, eventually)



----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

We always knew that shapelets would play some kind of role in source
characterisation. Sarod has now been playing with the stuff, and that
has triggered new thoughts.

The bottom line: This is a VERY important development, because it
provides us with a (potentially affordable) mechanism for dealing with
Cat I sources, without using the uv-brick. (The latter is expensive,
and should be used exclusively for Cat II subtraction.) The proposed
shapelet mechanism is a generalisation of our socalled 'third way',
i.e. the prediction of smallish elliptic gaussians, for which it could
be assumed that image-plane effects were approximately constant over
its extent. With shapelets, we can have Cat I sources of arbitrary
shape, apply image-plane effects correctly, and solve for source
parameters and instrumental parameters (including those of the
image-plane effects) in the normal way.

In addition, it provides an elegant mechanism for source extraction
from residual images. And it may help with floptics. It is wonderful.

----------------------------------------------------------------------------------
background:
----------------------------------------------------------------------------------

  -) An arbitrary image may be decomposed into a linear combination of
  'shapelet' base functions. Cartesian shapelets are Hermite
  polynomials, multiplied by a Gaussian. There are also Polar
  shapelets. 

  -) Shapelet decomposition is a compression mechanism: the number of
  coeff can be much smaller than the nr of image pixels. (This depends
  rather strongly on the choice origin of the image, hich should be
  close to the center of flux.)

  -) In our case, shapelet coeff may also depend on freq and time        <---- !!
  (always polynomial?), of course.

  -) Since it should be possible to solve for shapelet coeff, they
  must be associated with a MeqParm, and stored in a MeqParm table.

  -) Sarod can decompose an image into shapelets, using SVD. I imagne
  that would be a ShapeletDecomposer node, which takes some form of
  image as child. It also needs a number of (optional) staterec
  arguments to control the decomposition process. The result is a
  vells with coeff, as would be produced by a MeqParm.

     -) He can also reconstruct from shapelet coeff. He will turn this
     into several nodes (see below).

  -) Sarod has a standalone program for testing shapelet
  decomposition.  Input parameters are a FITS file, coordinates of the
  origin (default is centre of the image), and a few shapelet scale
  parameters. The result is a small panel of 4 images: input,
  shapelets, reconstruction, and difference. In the future, the
  reconstruction may be replaced with the reconstruction of the
  Fourier Transforms of the shapelet functions, i.e. the uv-plane
  representation.

      -) On baez: in WH/contrib/SBY
         run by: ./gui 

     

----------------------------------------------------------------------------------
Shapelet vells
----------------------------------------------------------------------------------

  -) Shapelet coeff are passed in the form of vells. A group 


----------------------------------------------------------------------------------
Image-plane
----------------------------------------------------------------------------------

  -) A ShapeletImageTransform (SIT) node reconstructs an image (l,m)
  from a set of (1-100!) shapelet coeff. The latter are obtained in
  the form of vells from its MeqParm child(ren) (tensor of MeqParms?)
  A SIT node gets a 4D (t,f,l,m) request, but sends only a 2D (t,f)
  request to the children that provide it with shapelet coeff.  

    -) The requested (l,m)-grid can have any size/resolution.

    -) The (l,m) envelope determines the scale parameters of the
    shapelet reconstruction (unless specifically overridden).

    -) So we need to think about tensor MeqParms, i.e. groups of
    related MeqParms. Perhaps they can be stored efficiently in a
    MeqParm table? 


----------------------------------------------------------------------------------
uv-plane
----------------------------------------------------------------------------------

  -) A ShapeletVisTransform (SVT) node returns source visibilities for
  a particular ifr, for a particular domain(t,f). It does this by
  reconstructing (averaged!) values for the (u,v,w) coordinates of
  the requested domain(t,f) cells.

     -) The prdiction is for the source at the phase centre. If the
     source is small, or the domain cells small, the reconstructed
     function will be linear over a cell. Thus, averaging is
     approximated by the value at the centre of the cell.

     -) Can we detect (e.g. from the mode number) when the deviation
     from linear over a cell is too large?

     -) Smearing issues when moving away from the phase centre....

  -) The SVT has the following children:
     - A tensor of MeqParms, for shapelet coeff (see SIT node)
     - A vector of (u,v,w) coordinates(t,f)
     - [optional]: image-plane effect(t,f) for this ifr

  -) The SVT makes uses as base-functions the Fourier Transforms of
  the shapelet base functions, multiplying with the shapelet coeff.

  -) Depending on the nr of domain cells, it may be more advantageous
  to calculate gridded uv-values first, and interpolating them (like
  the uv-brick).

  -) The image-plane effects are used to multiply the shapelet image
  (obtained how?), after which a new shapelet decomposition is
  done. The latter is then used to make visibilities. NB: What sort of
  tree would this produce, given the available node types?

     -) We can speed things up by inserting a MeqMean node after the
     image-plane effect node. This is equivalent to assuming that the
     effect is constant over the source, while retaining the
     possibility of solving for its parameters.


--------------------------------------------------------------------------
  Applications:
--------------------------------------------------------------------------

The proposed family of shapelet-related nodes solve a range of
existing problems in an elegant way:

  -) Source representation in the LSM: Most LOFAR sources will be
  (slightly) extended.

     -) Dynamic range: It is very difficult to represent a source that
     is a little bit extended (i.e. just about the size of the PSF)
     with CLEAN components. Shapelets might do better, especially if
     we can solve for frequency-dependent coefficients from wide-band
     uv-data: The source is resolved better for the higher frequencies. 

  -) Prediction of visibilities: Generalisation of the 'third way' to
  arbitrary shapes, but now including the application of image-plane
  effects.

  -) Deconvolution: Decompose the centre part of the PSF into
  shapelets, and divide the corresponding shapelets of the decomposed
  image of the source.....

     -) How to deal with the outlying parts of the PSF (grating rings
     etc).

     -) How to deal with position-dependent PSF? Can we use this to
     estimate the position-dependence?

  -) Solving for Cat I source parameters: In the same way as point sources.

  -) Source extraction: Assume a CLEAN image derived from a residual image.

     -) New source: Define a small window that contains the group of
     CLEAN components that are to be converted into shapelets. Divide
     by obswin, decompose into shapelets, and store as MeqParm.

     -) Existing source: The LSM knows the size of the source, which
     is used to define a small window in the CLEAN image. Lift out
     this subimage, and divide by the obswin.  Then reconstruct the
     current source image from its shapelets, and add the result to
     the subimage.  Then decompose the total into updated shapelets.

     -) NB: Sarod can point RJN to some papers/programs that do image
     segmentation to find suitable blobs for shapelet decomposition.
     This is useful for extraction of new sources.


  -) Floptics: ...


--------------------------------------------------------------------------
--------------------------------------------------------------------------
 MeqParms:
--------------------------------------------------------------------------

  -) We now have the following mechanisms for storing MeqParm values:

     -) polcs: arrays of polynomial coeff, usually 2D (t,f), but can
     also be 0D,1D,3D,4D etc. Each has a validity domain (t,f,...).
     Each polc is stored in a separate MeqParm table row. Polc coeffs
     are normalised on their domain, to avoid problems with powers of
     large coordinate values.

     -) polclog: a bit of an odd one out. Get rid of it and use
     compiled funklet instead?

     -) compiled funklet: 

        - related to MeqFunctional node....

     -) tabulated data (inc image)
     

  -) All types should be storable in MeqParm tables, each with its
  validity domain.

  -) The available values of a MeqParm could be a mixture of them all...

  -) We need better MeqParm visualisation tools, which somehow deals
  with all these types, and can plot groups of MeqParms together.


--------------------------------------------------------------------------
