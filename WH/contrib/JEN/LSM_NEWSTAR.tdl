# ../Timba/PyApps/test/LSM_NEWSTAR.tdl:  
#   Generation of sources with NEWSTAR parametrization

# standard preamble
from Timba.TDL import *
from Timba.Meq import meq

from JEN_lsm import *

#================================================================================
# The forest state record will be included automatically in the tree.
# Just assign fields to: Settings.forest_state[key] = ...
#================================================================================

Settings.forest_state.cache_policy = 100
Settings.forest_state.stream = record(input=record(), output=record())
Settings.forest_state.bookmarks = []

#================================================================================
# The main routine:
#================================================================================

def define_forest (ns):
    name = 'unpol'         # the simplest case: an unpolarised source
    name = 'QU2'	   # a linearly polarised source 
    name = 'RMtest'        # test of Rotation Measure (RM)
    # name = '3c147'         # a predefined WSRT calibrator source
    sixpack = lsm_NEWSTAR_source (ns, name=name, trace=0)

    # Make a single root node (e.g. a MeqAdd), called 'root', 
    # which can be executed in the test_forest() function below
    # cc = list(sixpack['iquv'])                  # make a list of 4 children
    iquv = sixpack['iquv']
    cc = [iquv['StokesI'], iquv['StokesQ'], iquv['StokesU'], iquv['StokesV']]
    root = (ns.root() << Meq.Add(children=cc))


#================================================================================
# Test routine:
#================================================================================

def test_forest (mqs, parent):
  """test_forest() is a standard TDL name. When a forest script is
  loaded by, e.g., the browser, and the "test" option is set to true,
  this method is automatically called after define_forest() to run a 
  test on the forest. The 'mqs' argument is a meqserver proxy object.
  """;
  from Timba.Meq import meq

  # run test on the forest
  cells = meq.cells(meq.domain(0,1,0,1),num_freq=6,num_time=4);
  request = meq.request(cells,eval_mode=0);
  mqs.meq('Node.Execute',record(name='root',request=request));
  mqs.meq('Save.Forest',record(file_name='MeqToy_unop.forest'));



#================================================================================
# Test routine:
#================================================================================
# this is a useful thing to have at the bottom of the script, 
# it allows us to check the tree for consistency
# simply by running 'python script.tdl'

if __name__ == '__main__':
  ns = NodeScope()
  define_forest(ns)
  # resolves nodes
  ns.Resolve()	
  print len(ns.AllNodes()),'nodes defined';
