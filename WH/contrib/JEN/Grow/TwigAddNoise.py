# file: ../Grow/TwigAddNoise.py

# History:
# - 14sep2007: creation (from PluginAddNoise.py)

# Description:

"""The TwigAddNoise class adds (gaussian) noise to its input result.
"""


#======================================================================================

#
#% $Id$ 
#
#
# Copyright (C) 2002-2007
# The MeqTree Foundation & 
# ASTRON (Netherlands Foundation for Research in Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>,
# or write to the Free Software Foundation, Inc., 
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

from Timba.TDL import *
from Timba.Meq import meq

from Timba.Contrib.JEN.Grow import Twig
from Timba.Contrib.JEN.control import OptionManager
from Timba.Contrib.JEN.control import Executor

import math



#=============================================================================
#=============================================================================

class TwigAddNoise(Twig.Twig):
    """Class derived from Twig"""

    def __init__(self, quals=None,
                 submenu='compile',
                 OM=None, namespace=None,
                 **kwargs):

        Twig.Twig.__init__(self, quals=quals,
                           name='TwigAddNoise',
                           submenu=submenu,
                           OM=OM, namespace=namespace,
                           **kwargs)
        return None

    #====================================================================
    
    def derivation_tree (self, ss, level=1):
        """Append the formatted derivation tree of this object to the string ss. 
        """
        ss += self.help_format(Twig.Twig.grow.__doc__, level=level)
        ss = Twig.Twig.derivation_tree(self, ss, level=level+1)
        return ss

    #====================================================================

    def define_compile_options(self, trace=True):
        """Specific: Define the compile options in the OptionManager.
        """
        if not self.on_entry (trace=trace):
            return self.bypass (trace=trace)
        #..............................................
        self._OM.define(self.optname('stddev'), 1.0,
                        prompt='stddev',
                        opt=[0.1,1.0], more=float,
                        doc="""add gaussian noise (if stddev>0)
                        """)
        self._OM.define(self.optname('unop'), None,
                        prompt='apply unary to noise',
                        opt=['Exp','ExpExp'], more=str,
                        doc="""apply a unary operation to the noise.
                        This changes the statistics.
                        E.g. for flagging, peaks can be generated by Exp().
                        """)
        self._OM.define(self.optname('datatype'), 'auto',
                        prompt='noise data type',
                        opt=['auto','real','complex','polar'], 
                        doc="""specify the data-type of the added noise.
                        - If 'auto', the type is determined by the type
                        of the result to which the noise is added.
                        - If 'complex', the real and imag parts are noisy.
                        - If 'polar', the ampl and phase are noisy.
                        """)
        #..............................................
        return self.on_exit(trace=trace)



    #====================================================================

    def grow (self, ns, node, test=None, trace=True):
        """The TwigAddNoise class is derived from the Twig class.
        It is used to add gaussian noise (stddev) to its input result.
        Complex noise may be generated by adding noise either to the
        real and imaginary parts, or to the amplitude and phase (polar).
        Optionally, the statistics of the noise may be changed by
        applying a unary operation to it, e.g. Exp(). This is useful
        to generate peaks for flagging.
        """
        # Check the node, and make self.ns:
        if not self.on_input (ns, node, trace=trace):
            return self.bypass (trace=trace)
        #..............................................

        if test==True:
            test = dict(stddev=1.0)

        # Read the specified options:
        stddev = self.optval('stddev', test=test)
        unop = self.optval('unop', test=test)
        datatype = self.optval('datatype', test=test)

        if datatype=='auto':
            if self.datadesc()['is_complex']:
                datatype = 'complex'
            else:
                datatype = 'real'

        # Make the subtree:
        name = 'noise~'+str(stddev)
        internodes = []
        if datatype=='complex':
            real = self.ns['real'] << Meq.GaussNoise(stddev=stddev)
            imag = self.ns['imag'] << Meq.GaussNoise(stddev=stddev)
            noise = self.ns[name] << Meq.ToComplex(real,imag)
        elif datatype=='polar':
            ampl = self.ns['ampl'] << Meq.GaussNoise(stddev=stddev)
            phase = self.ns['phase'] << Meq.GaussNoise(stddev=stddev)
            noise = self.ns[name] << Meq.ToPolar(ampl,phase)
        else:
            noise = self.ns[name] << Meq.GaussNoise(stddev=stddev)
        internodes.append(noise)

        # Optionally, change the noise statistics, e.g. to make spikes:
        if unop:
            if unop=='ExpExp':
                name = 'Exp('+name+')'
                noise = self.ns[name] << Meq.Exp(noise)
                name = 'Exp('+name+')'
                noise = self.ns[name] << Meq.Exp(noise)
            else:
                name = unop+'('+name+')'
                noise = self.ns[name] << getattr(Meq,unop)(noise)
            internodes.append(noise)
            
        node = self.ns['+'+name] << Meq.Add(node,noise)
        self.bookmark(internodes)

        #..............................................
        # Check the new rootnode:
        return self.on_output (node, trace=trace)





#=============================================================================
#=============================================================================
#=============================================================================
# Test routine (with meqbrowser):
#=============================================================================


pgt = None
if 0:
    xtor = Executor.Executor()
    # xtor.add_dimension('l', unit='rad')
    # xtor.add_dimension('m', unit='rad')
    pgt = TwigAddNoise()
    pgt.make_TDLCompileOptionMenu()
    # pgt.display()


def _define_forest(ns):

    global pgt,xtor
    if not pgt:
        xtor = Executor.Executor()
        pgt = TwigAddNoise()
        pgt.make_TDLCompileOptionMenu()

    cc = []

    node = ns << 1.0
    rootnode = pgt.grow(ns, node)
    cc.append(rootnode)

    if len(cc)==0: cc.append(ns.dummy<<1.1)
    ns.result << Meq.Composer(children=cc)
    xtor.make_TDLRuntimeOptionMenu(node=ns.result)
    return True



#---------------------------------------------------------------

Settings.forest_state.cache_policy = 100

def _tdl_job_execute (mqs, parent):
    """Execute the forest with the specified options (domain etc),
    starting at the named node"""
    return xtor.execute(mqs, parent)
    
def _tdl_job_display (mqs, parent):
    """Just display the current contents of the Twig object"""
    pgt.display('_tdl_job')
       
def _tdl_job_display_full (mqs, parent):
    """Just display the current contents of the Twig object"""
    pgt.display('_tdl_job', full=True)
       


       



#===============================================================
# Test routine (without meqbrowser):
#===============================================================


if __name__ == '__main__':
    ns = NodeScope()

    if 1:
        pgt = TwigAddNoise()
        pgt.display('initial')

    if 1:
        pgt.make_TDLCompileOptionMenu()

    if 1:
        node = ns << 1.0
        test = dict(stddev=1.0, datatype='polar')
        pgt.grow(ns, node, test=test, trace=True)

    if 1:
        pgt.display('final', OM=True, full=True)



#===============================================================

