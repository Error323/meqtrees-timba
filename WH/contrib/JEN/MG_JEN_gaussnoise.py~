script_name = 'MG_JEN_template'

# Short description:
# Template for the generation of MeqGraft scripts

# Author: Jan Noordam (JEN), Dwingeloo

# History:
# - 22 aug 2005: creation

# Copyright: The MeqTree Foundation 


# Import Python modules:
from Timba.TDL import *
from Timba.Meq import meq

import MG_JEN_forest_state
import MG_JEN_bookmark

from numarray import *
# from string import *
# from copy import deepcopy

# import MG_JEN_....


#================================================================================
# Importable function(s): The essence of a MeqGraft script.
# To be imported into user scripts (see _def_forest() below) 
#================================================================================


def TDL_importable(ns, **pp):
   node = ns.dummy << Meq.Parm(array([[1,-0.2],[0.3,0.1]]))
   return node






#================================================================================
#================================================================================
#================================================================================
# Executable routine (may be executed from the browser):
# To be used as example, for experimentation, and automatic testing.
#================================================================================

def _define_forest (ns):

   # Parameters:
   p1 = 1
   p2 = 2

   # Function body:
   node = TDL_importable (ns, arg1=p1, arg2=p2)

   # Make some (pages of) bookmarks for easy viewing of the result:
   MG_JEN_bookmark.bookmark(node, page='result') 
   MG_JEN_bookmark.bookmark(node, page='result', viewer='Record Browser')

   # Make a (single) root node for use in _test_forest() below:
   global _test_root
   _test_root = '_test_root'
   root = ns[_test_root] << Meq.Selector(node)
   
   
#================================================================================
# The forest state record will be included automatically in the tree.
# Just assign fields to: Settings.forest_state[key] = ...
#================================================================================

MG_JEN_forest_state.init(script_name)


#================================================================================
# Test routine (may be called from the browser):
# The 'mqs' argument is a meqserver proxy object.
#================================================================================


def _test_forest (mqs, parent):

   # Execute the forest with a 'suitable' request:
   cells = meq.cells(meq.domain(0,1,0,1),num_freq=20,num_time=19);
   request = meq.request(cells,eval_mode=0);
   global _test_root                         # see _define_forest()
   mqs.meq('Node.Execute',record(name=_test_root, request=request));

   # Save the meqforest in a file:
   MG_JEN_forest_state.save(mqs)



#================================================================================
# Test routine to check the tree for consistency, in the absence of a browser
#================================================================================

if __name__ == '__main__':
   ns = NodeScope();
   define_forest(ns);
   ns.Resolve();
  
