      #ifndef TID_Meq_h
      #define TID_Meq_h 1
      
      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../TIMBA/DMI/aid/build_aid_maps.pl
      #include <DMI/TypeId.h>

      // should be called somewhere in order to link in the registry
      int aidRegistry_Meq ();

#ifndef _defined_id_TpMeqCells
#define _defined_id_TpMeqCells 1
const DMI::TypeId TpMeqCells(-1171);              // from /home/oms/LOFAR/TIMBA/MEQ/src/Cells.h:35
const int TpMeqCells_int = -1171;
namespace Meq { class Cells; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Cells> : public TypeTraits<Meq::Cells>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqCells_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Cells & ContainerReturnType;
                typedef const Meq::Cells & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqDomain
#define _defined_id_TpMeqDomain 1
const DMI::TypeId TpMeqDomain(-1161);             // from /home/oms/LOFAR/TIMBA/MEQ/src/Domain.h:30
const int TpMeqDomain_int = -1161;
namespace Meq { class Domain; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Domain> : public TypeTraits<Meq::Domain>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqDomain_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Domain & ContainerReturnType;
                typedef const Meq::Domain & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqFunction
#define _defined_id_TpMeqFunction 1
const DMI::TypeId TpMeqFunction(-1082);           // from /home/oms/LOFAR/TIMBA/MEQ/src/Function.h:29
const int TpMeqFunction_int = -1082;
namespace Meq { class Function; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Function> : public TypeTraits<Meq::Function>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqFunction_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Function & ContainerReturnType;
                typedef const Meq::Function & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqFunklet
#define _defined_id_TpMeqFunklet 1
const DMI::TypeId TpMeqFunklet(-1094);            // from /home/oms/LOFAR/TIMBA/MEQ/src/Funklet.h:33
const int TpMeqFunklet_int = -1094;
namespace Meq { class Funklet; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Funklet> : public TypeTraits<Meq::Funklet>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqFunklet_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Funklet & ContainerReturnType;
                typedef const Meq::Funklet & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqNode
#define _defined_id_TpMeqNode 1
const DMI::TypeId TpMeqNode(-1064);               // from /home/oms/LOFAR/TIMBA/MEQ/src/Node.h:37
const int TpMeqNode_int = -1064;
namespace Meq { class Node; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Node> : public TypeTraits<Meq::Node>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqNode_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Node & ContainerReturnType;
                typedef const Meq::Node & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqPolc
#define _defined_id_TpMeqPolc 1
const DMI::TypeId TpMeqPolc(-1143);               // from /home/oms/LOFAR/TIMBA/MEQ/src/Polc.h:31
const int TpMeqPolc_int = -1143;
namespace Meq { class Polc; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Polc> : public TypeTraits<Meq::Polc>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqPolc_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Polc & ContainerReturnType;
                typedef const Meq::Polc & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqRequest
#define _defined_id_TpMeqRequest 1
const DMI::TypeId TpMeqRequest(-1108);            // from /home/oms/LOFAR/TIMBA/MEQ/src/Request.h:31
const int TpMeqRequest_int = -1108;
namespace Meq { class Request; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Request> : public TypeTraits<Meq::Request>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqRequest_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Request & ContainerReturnType;
                typedef const Meq::Request & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqResult
#define _defined_id_TpMeqResult 1
const DMI::TypeId TpMeqResult(-1114);             // from /home/oms/LOFAR/TIMBA/MEQ/src/Result.h:34
const int TpMeqResult_int = -1114;
namespace Meq { class Result; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Result> : public TypeTraits<Meq::Result>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqResult_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Result & ContainerReturnType;
                typedef const Meq::Result & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqVellSet
#define _defined_id_TpMeqVellSet 1
const DMI::TypeId TpMeqVellSet(-1095);            // from /home/oms/LOFAR/TIMBA/MEQ/src/VellSet.h:35
const int TpMeqVellSet_int = -1095;
namespace Meq { class VellSet; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::VellSet> : public TypeTraits<Meq::VellSet>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqVellSet_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::VellSet & ContainerReturnType;
                typedef const Meq::VellSet & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpMeqVells
#define _defined_id_TpMeqVells 1
const DMI::TypeId TpMeqVells(-1051);              // from /home/oms/LOFAR/TIMBA/MEQ/src/Vells.h:30
const int TpMeqVells_int = -1051;
namespace Meq { class Vells; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Meq::Vells> : public TypeTraits<Meq::Vells>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpMeqVells_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Meq::Vells & ContainerReturnType;
                typedef const Meq::Vells & ContainerParamType;
              };
            };
#endif


#endif
