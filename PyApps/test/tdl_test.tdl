# standard preamble
from Timba.TDL import *

# forest_state is a standard TDL name. If defined in the script, this
# record is passed to Set.Forest.State. 
forest_state = record(cache_policy=100);

def define_forest (ns):
  """define_forest() is a standard TDL name. When a forest script is
  loaded by, e.g., the browser, this method is automatically called to
  define the forest. The 'ns' argument is a NodeScope object in which
  the forest is to be defined, usually this is simply the global scope.
  """;
  ns['solver'] << Meq.Solver(
    num_iter=5,debug_level=10,solvable="x",
    children = Meq.Condeq(
      Meq.Parm([0,1]),
      5 + (ns.x << Meq.Parm(0,tiling=record(time=1),node_groups='Parm1'))
    ),
  );

def test_forest (mqs):
  """test_forest() is a standard TDL name. When a forest script is
  loaded by, e.g., the browser, and the "test" option is set to true,
  this method is automatically called after define_forest() to run a 
  test on the forest. The 'mqs' argument is a meqserver proxy object.
  """;
  from Timba.Meq import meq
  # run tests on the forest
  cells = meq.cells(meq.domain(0,1,0,1),num_freq=6,num_time=4);
  request = meq.request(cells,eval_mode=0);
  mqs.meq('Node.Execute',record(name='x',request=request));
  mqs.meq('Save.Forest',record(file_name='tile_test.forest.save'));
  # execute request on solver
  request = meq.request(cells,eval_mode=1);
  mqs.meq('Node.Execute',record(name='solver',request=request));


# this is the testing branch, executed when the script is run directly
# via 'python script.py'

if __name__ == '__main__':
#  from Timba.Meq import meqds 
  
  Timba.TDL._dbg.set_verbose(5);
  
  ns = NodeScope();

  define_forest(ns);
  
  # resolves nodes
  ns.Resolve();
  
#  test_forest(None);
  
#  # feeds repository to back-end to create the forest
#  MqsBackend.create_forest(ns.repository(),mqs);
#
#  test_forest(meqds.mqs());
